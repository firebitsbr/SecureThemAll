1,9d0
< # 1 "/home/epicosy/thesis/implementation/repair/SecureThemAll2/benchmark/cb-multios/challenges/BitBlaster/src/main.c"
< # 1 "<built-in>" 1
< # 1 "<built-in>" 3
< # 336 "<built-in>" 3
< # 1 "<command line>" 1
< # 1 "<built-in>" 2
< # 1 "/home/epicosy/thesis/implementation/repair/SecureThemAll2/benchmark/cb-multios/challenges/BitBlaster/src/main.c" 2
< # 1 "/home/epicosy/thesis/implementation/repair/SecureThemAll2/benchmark/cb-multios/include/libcgc.h" 1
< # 19 "/home/epicosy/thesis/implementation/repair/SecureThemAll2/benchmark/cb-multios/include/libcgc.h"
12,20c3,7
< # 51 "/home/epicosy/thesis/implementation/repair/SecureThemAll2/benchmark/cb-multios/include/libcgc.h"
< typedef long int _fd_mask;
< 
< 
< 
< typedef struct {
<     _fd_mask _fd_bits[1024 / (8 * sizeof(_fd_mask))];
< } cgc_fd_set;
< # 75 "/home/epicosy/thesis/implementation/repair/SecureThemAll2/benchmark/cb-multios/include/libcgc.h"
---
> typedef long _fd_mask;
> struct __anonstruct_cgc_fd_set_1 {
>    _fd_mask _fd_bits[1024UL / (8UL * sizeof(_fd_mask ))] ;
> };
> typedef struct __anonstruct_cgc_fd_set_1 cgc_fd_set;
22,23c9,10
<     int tv_sec;
<     int tv_usec;
---
>    int tv_sec ;
>    int tv_usec ;
25,72c12,15
< # 122 "/home/epicosy/thesis/implementation/repair/SecureThemAll2/benchmark/cb-multios/include/libcgc.h"
< void cgc__terminate(unsigned int status) __attribute__((__noreturn__));
< int cgc_transmit(int fd, const void *buf, cgc_size_t count, cgc_size_t *tx_bytes);
< int cgc_receive(int fd, void *buf, cgc_size_t count, cgc_size_t *rx_bytes);
< int cgc_fdwait(int nfds, cgc_fd_set *readfds, cgc_fd_set *writefds,
<                const struct cgc_timeval *timeout, int *readyfds);
< int cgc_allocate(cgc_size_t length, int is_X, void **addr);
< int cgc_deallocate(void *addr, cgc_size_t length);
< int cgc_random(void *buf, cgc_size_t count, cgc_size_t *rnd_bytes);
< 
< 
< 
< typedef struct { long _b[8]; } jmp_buf[1];
< extern int cgc_setjmp(jmp_buf) __attribute__((__returns_twice__));
< extern void cgc_longjmp(jmp_buf, int) __attribute__((__noreturn__));
< 
< extern float cgc_sinf(float); extern double cgc_sin(double); extern long double cgc_sinl(long double);
< extern float cgc_cosf(float); extern double cgc_cos(double); extern long double cgc_cosl(long double);
< extern float cgc_tanf(float); extern double cgc_tan(double); extern long double cgc_tanl(long double);
< extern float cgc_logf(float); extern double cgc_log(double); extern long double cgc_logl(long double);
< extern float cgc_rintf(float); extern double cgc_rint(double); extern long double cgc_rintl(long double);
< extern float cgc_sqrtf(float); extern double cgc_sqrt(double); extern long double cgc_sqrtl(long double);
< extern float cgc_fabsf(float); extern double cgc_fabs(double); extern long double cgc_fabsl(long double);
< extern float cgc_log2f(float); extern double cgc_log2(double); extern long double cgc_log2l(long double);
< extern float cgc_exp2f(float); extern double cgc_exp2(double); extern long double cgc_exp2l(long double);
< extern float cgc_expf(float); extern double cgc_exp(double); extern long double cgc_expl(long double);
< extern float cgc_log10f(float); extern double cgc_log10(double); extern long double cgc_log10l(long double);
< 
< extern float cgc_powf(float, float);
< extern double cgc_pow(double, double);
< extern long double cgc_powl(long double, long double);
< extern float cgc_atan2f(float, float);
< extern double cgc_atan2(double, double);
< extern long double cgc_atan2l(long double, long double);
< extern float cgc_remainderf(float, float);
< extern double cgc_remainder(double, double);
< extern long double cgc_remainderl(long double, long double);
< extern float cgc_scalbnf(float, int);
< extern double cgc_scalbn(double, int);
< extern long double cgc_scalbnl(long double, int);
< extern float cgc_scalblnf(float, long int);
< extern double cgc_scalbln(double, long int);
< extern long double cgc_scalblnl(long double, long int);
< extern float cgc_significandf(float);
< extern double cgc_significand(double);
< extern long double cgc_significandl(long double);
< # 2 "/home/epicosy/thesis/implementation/repair/SecureThemAll2/benchmark/cb-multios/challenges/BitBlaster/src/main.c" 2
< # 17 "/home/epicosy/thesis/implementation/repair/SecureThemAll2/benchmark/cb-multios/challenges/BitBlaster/src/main.c"
---
> struct __anonstruct_jmp_buf_2 {
>    long _b[8] ;
> };
> typedef struct __anonstruct_jmp_buf_2 jmp_buf[1];
74a18,104
> extern  __attribute__((__noreturn__)) void cgc__terminate(unsigned int status ) ;
> extern int cgc_transmit(int fd , void const   *buf , cgc_size_t count ,
>                         cgc_size_t *tx_bytes ) ;
> extern int cgc_receive(int fd , void *buf , cgc_size_t count ,
>                        cgc_size_t *rx_bytes ) ;
> extern int cgc_fdwait(int nfds , cgc_fd_set *readfds , cgc_fd_set *writefds ,
>                       struct cgc_timeval  const  *timeout , int *readyfds ) ;
> extern int cgc_allocate(cgc_size_t length , int is_X , void **addr ) ;
> extern int cgc_deallocate(void *addr , cgc_size_t length ) ;
> extern int cgc_random(void *buf , cgc_size_t count , cgc_size_t *rnd_bytes ) ;
> extern int cgc_setjmp(struct __anonstruct_jmp_buf_2 * )  __attribute__((__returns_twice__)) ;
> extern  __attribute__((__noreturn__)) void cgc_longjmp(struct __anonstruct_jmp_buf_2 * ,
>                                                        int  ) ;
> extern float cgc_sinf(float  ) ;
> extern double cgc_sin(double  ) ;
> extern long double cgc_sinl(long double  ) ;
> extern float cgc_cosf(float  ) ;
> extern double cgc_cos(double  ) ;
> extern long double cgc_cosl(long double  ) ;
> extern float cgc_tanf(float  ) ;
> extern double cgc_tan(double  ) ;
> extern long double cgc_tanl(long double  ) ;
> extern float cgc_logf(float  ) ;
> extern double cgc_log(double  ) ;
> extern long double cgc_logl(long double  ) ;
> extern float cgc_rintf(float  ) ;
> extern double cgc_rint(double  ) ;
> extern long double cgc_rintl(long double  ) ;
> extern float cgc_sqrtf(float  ) ;
> extern double cgc_sqrt(double  ) ;
> extern long double cgc_sqrtl(long double  ) ;
> extern float cgc_fabsf(float  ) ;
> extern double cgc_fabs(double  ) ;
> extern long double cgc_fabsl(long double  ) ;
> extern float cgc_log2f(float  ) ;
> extern double cgc_log2(double  ) ;
> extern long double cgc_log2l(long double  ) ;
> extern float cgc_exp2f(float  ) ;
> extern double cgc_exp2(double  ) ;
> extern long double cgc_exp2l(long double  ) ;
> extern float cgc_expf(float  ) ;
> extern double cgc_exp(double  ) ;
> extern long double cgc_expl(long double  ) ;
> extern float cgc_log10f(float  ) ;
> extern double cgc_log10(double  ) ;
> extern long double cgc_log10l(long double  ) ;
> extern float cgc_powf(float  , float  ) ;
> extern double cgc_pow(double  , double  ) ;
> extern long double cgc_powl(long double  , long double  ) ;
> extern float cgc_atan2f(float  , float  ) ;
> extern double cgc_atan2(double  , double  ) ;
> extern long double cgc_atan2l(long double  , long double  ) ;
> extern float cgc_remainderf(float  , float  ) ;
> extern double cgc_remainder(double  , double  ) ;
> extern long double cgc_remainderl(long double  , long double  ) ;
> extern float cgc_scalbnf(float  , int  ) ;
> extern double cgc_scalbn(double  , int  ) ;
> extern long double cgc_scalbnl(long double  , int  ) ;
> extern float cgc_scalblnf(float  , long  ) ;
> extern double cgc_scalbln(double  , long  ) ;
> extern long double cgc_scalblnl(long double  , long  ) ;
> extern float cgc_significandf(float  ) ;
> extern double cgc_significand(double  ) ;
> extern long double cgc_significandl(long double  ) ;
> cgc_size_t cgc_transmit_all(int fd , char *buf , cgc_size_t size ) 
> { 
>   cgc_size_t rx_bytes ;
>   cgc_size_t total ;
>   int ret ;
> 
>   {
>   rx_bytes = (cgc_size_t )0;
>   total = (cgc_size_t )0;
>   ret = 0;
>   if ((unsigned long )buf == (unsigned long )((char *)0)) {
>     return ((cgc_size_t )0);
>   } else {
> 
>   }
>   while (1) {
>     ret = cgc_transmit(fd, (void const   *)buf, size - total, & rx_bytes);
>     if (ret != 0) {
>       return ((cgc_size_t )0);
>     } else
>     if (rx_bytes == 0UL) {
>       return ((cgc_size_t )0);
>     } else {
76,91d105
< cgc_size_t cgc_transmit_all(int fd, char* buf, cgc_size_t size)
< {
<   cgc_size_t rx_bytes = 0;
<   cgc_size_t total = 0;
<   int ret = 0;
<   if (buf == (0))
<   {
<     return (0);
<   }
< 
<   do
<   {
<     ret = cgc_transmit(fd, buf, size - total, &rx_bytes);
<     if ( (ret != 0) || (rx_bytes == 0) )
<     {
<       return (0);
94,95c108
<   }
<   while (total < size);
---
>     if (total < size) {
96a110,113
>     } else {
>       break;
>     }
>   }
98a116,139
> }
> cgc_size_t cgc_receive_all(int fd , char *buf , cgc_size_t size ) 
> { 
>   cgc_size_t rx_bytes ;
>   cgc_size_t total ;
>   int ret ;
> 
>   {
>   rx_bytes = (cgc_size_t )0;
>   total = (cgc_size_t )0;
>   ret = 0;
>   if ((unsigned long )buf == (unsigned long )((char *)0)) {
>     return ((cgc_size_t )0);
>   } else {
> 
>   }
>   while (1) {
>     ret = cgc_receive(fd, (void *)buf, size - total, & rx_bytes);
>     if (ret != 0) {
>       return ((cgc_size_t )0);
>     } else
>     if (rx_bytes == 0UL) {
>       return ((cgc_size_t )0);
>     } else {
100,115d140
< cgc_size_t cgc_receive_all(int fd, char* buf, cgc_size_t size)
< {
<   cgc_size_t rx_bytes = 0;
<   cgc_size_t total = 0;
<   int ret = 0;
<   if (buf == (0))
<   {
<     return (0);
<   }
< 
<   do
<   {
<     ret = cgc_receive(fd, buf, size-total, &rx_bytes);
<     if ( (ret != 0) || (rx_bytes == 0) )
<     {
<       return (0);
118,119c143
<   }
<   while (total < size);
---
>     if (total < size) {
120a145,148
>     } else {
>       break;
>     }
>   }
122a151,155
> }
> uint32_t gBoard[32]  ;
> void cgc_rotate_right(int row ) 
> { 
>   uint32_t temp ;
124,130d156
< uint32_t gBoard[32];
< 
< void cgc_rotate_right(int row)
< {
<   uint32_t temp;
< 
<   if ( (row < 0) || (row >= 32) )
131a158
>   if (row < 0) {
133c160,163
<   }
---
>   } else
>   if (row >= 32) {
>     return;
>   } else {
134a165
>   }
136a168
>   return;
138,154c170,197
< 
< uint32_t mask[32] = { 0x1, 0x2, 0x4, 0x8, 0x10, 0x20, 0x40, 0x80,
<                     0x100, 0x200, 0x400, 0x800, 0x1000, 0x2000, 0x4000, 0x8000,
<                     0x10000, 0x20000, 0x40000, 0x80000, 0x100000, 0x200000, 0x400000, 0x800000,
<                     0x1000000, 0x2000000, 0x4000000, 0x8000000, 0x10000000, 0x20000000, 0x40000000, 0x80000000 };
< 
< uint32_t neg_mask[32] = { ~0x1, ~0x2, ~0x4, ~0x8, ~0x10, ~0x20, ~0x40, ~0x80,
<                     ~0x100, ~0x200, ~0x400, ~0x800, ~0x1000, ~0x2000, ~0x4000, ~0x8000,
<                     ~0x10000, ~0x20000, ~0x40000, ~0x80000, ~0x100000, ~0x200000, ~0x400000, ~0x800000,
<                     ~0x1000000, ~0x2000000, ~0x4000000, ~0x8000000, ~0x10000000, ~0x20000000, ~0x40000000, ~0x80000000 };
< 
< void cgc_rotate_down(int col)
< {
<   int i = 0;
<   uint32_t temp = 0;
<   if ( (col < 0) || (col >= 32) )
<   {
---
> }
> uint32_t mask[32]  = 
>   {      (uint32_t )1,      (uint32_t )2,      (uint32_t )4,      (uint32_t )8, 
>         (uint32_t )16,      (uint32_t )32,      (uint32_t )64,      (uint32_t )128, 
>         (uint32_t )256,      (uint32_t )512,      (uint32_t )1024,      (uint32_t )2048, 
>         (uint32_t )4096,      (uint32_t )8192,      (uint32_t )16384,      (uint32_t )32768, 
>         (uint32_t )65536,      (uint32_t )131072,      (uint32_t )262144,      (uint32_t )524288, 
>         (uint32_t )1048576,      (uint32_t )2097152,      (uint32_t )4194304,      (uint32_t )8388608, 
>         (uint32_t )16777216,      (uint32_t )33554432,      (uint32_t )67108864,      (uint32_t )134217728, 
>         (uint32_t )268435456,      (uint32_t )536870912,      (uint32_t )1073741824,      2147483648U};
> uint32_t neg_mask[32]  = 
>   {      (uint32_t )(~ 1),      (uint32_t )(~ 2),      (uint32_t )(~ 4),      (uint32_t )(~ 8), 
>         (uint32_t )(~ 16),      (uint32_t )(~ 32),      (uint32_t )(~ 64),      (uint32_t )(~ 128), 
>         (uint32_t )(~ 256),      (uint32_t )(~ 512),      (uint32_t )(~ 1024),      (uint32_t )(~ 2048), 
>         (uint32_t )(~ 4096),      (uint32_t )(~ 8192),      (uint32_t )(~ 16384),      (uint32_t )(~ 32768), 
>         (uint32_t )(~ 65536),      (uint32_t )(~ 131072),      (uint32_t )(~ 262144),      (uint32_t )(~ 524288), 
>         (uint32_t )(~ 1048576),      (uint32_t )(~ 2097152),      (uint32_t )(~ 4194304),      (uint32_t )(~ 8388608), 
>         (uint32_t )(~ 16777216),      (uint32_t )(~ 33554432),      (uint32_t )(~ 67108864),      (uint32_t )(~ 134217728), 
>         (uint32_t )(~ 268435456),      (uint32_t )(~ 536870912),      (uint32_t )(~ 1073741824),      ~ 2147483648U};
> void cgc_rotate_down(int col ) 
> { 
>   int i ;
>   uint32_t temp ;
> 
>   {
>   i = 0;
>   temp = (uint32_t )0;
>   if (col < 0) {
156c199,202
<   }
---
>   } else
>   if (col >= 32) {
>     return;
>   } else {
157a204
>   }
159,161c206,209
<   for (i = 31; i > 0; i--)
<   {
<     gBoard[i] = (gBoard[i] & neg_mask[col]) | (gBoard[i-1] & mask[col]);
---
>   i = 31;
>   while (i > 0) {
>     gBoard[i] = (gBoard[i] & neg_mask[col]) | (gBoard[i - 1] & mask[col]);
>     i --;
163d210
< 
164a212
>   return;
166,184c214,240
< 
< void cgc_printBoard()
< {
<   int i = 0;
<   int j = 0;
<   int k = 0;
<   char buf[32 * 34];
< 
<   for (i = 0; i < 32; i++)
<   {
<     for (j = 0; j < 32; j++)
<     {
<       if (gBoard[i] & mask[j])
<       {
<         buf[k++] = '1';
<       }
<       else
<       {
<         buf[k++] = '.';
---
> }
> void cgc_printBoard(void) 
> { 
>   int i ;
>   int j ;
>   int k ;
>   char buf[1088] ;
>   int tmp ;
>   int tmp___0 ;
>   int tmp___1 ;
> 
>   {
>   i = 0;
>   j = 0;
>   k = 0;
>   i = 0;
>   while (i < 32) {
>     j = 0;
>     while (j < 32) {
>       if (gBoard[i] & mask[j]) {
>         tmp = k;
>         k ++;
>         buf[tmp] = (char )'1';
>       } else {
>         tmp___0 = k;
>         k ++;
>         buf[tmp___0] = (char )'.';
185a242
>       j ++;
187,191c244,251
<     buf[k++] = '\n';
<   }
<   buf[k] = '\0';
< 
<   cgc_transmit_all(1, buf, k);
---
>     tmp___1 = k;
>     k ++;
>     buf[tmp___1] = (char )'\n';
>     i ++;
>   }
>   buf[k] = (char )'\000';
>   cgc_transmit_all(1, buf, (cgc_size_t )k);
>   return;
193,197d252
< 
< void cgc_initBoard()
< {
<   gBoard[(32 - 1)] = 0xFFFFFFFF;
<   gBoard[(32 - 2)] = 0xFFFFFFFF;
198a254,256
> void cgc_initBoard(void) 
> { 
> 
200,203d257
< void cgc_remove_bits()
< {
<   if ( ((gBoard[32 - 1] & 0x00000003) == 0x00000003) &&
<        ((gBoard[32 - 2] & 0x00000003) == 0x00000003) )
205,207c259,261
<     gBoard[32 - 1] &= ~0x00000003;
<     gBoard[32 - 2] &= ~0x00000003;
<   }
---
>   gBoard[31] = 4294967295U;
>   gBoard[30] = 4294967295U;
>   return;
208a263,265
> }
> void cgc_remove_bits(void) 
> { 
210,213d266
< void cgc_makeMove(uint8_t move)
< {
<   int i = 0;
<   i = (move & 0x1F);
215d267
<   if ((move & 0x20))
217c269,277
<     cgc_rotate_right(i);
---
>   if ((gBoard[31] & 3U) == 3U) {
>     if ((gBoard[30] & 3U) == 3U) {
>       gBoard[31] &= 4294967292U;
>       gBoard[30] &= 4294967292U;
>     } else {
> 
>     }
>   } else {
> 
219c279,285
<   else
---
>   return;
> }
> }
> void cgc_makeMove(uint8_t move ) 
> { 
>   int i ;
> 
220a287,291
>   i = 0;
>   i = (int )move & 31;
>   if ((int )move & 32) {
>     cgc_rotate_right(i);
>   } else {
223d293
< 
224a295,296
>   return;
> }
225a298,300
> int cgc_isWinner(void) 
> { 
>   int i ;
227,230d301
< int cgc_isWinner()
< {
<   int i = 0;
<   for (i = 0; i < 32; i++)
232,233c303,306
<     if (gBoard[i] != 0)
<     {
---
>   i = 0;
>   i = 0;
>   while (i < 32) {
>     if (gBoard[i] != 0U) {
234a308,309
>     } else {
> 
235a311
>     i ++;
238a315,320
> }
> int main(int cgc_argc , char **cgc_argv ) 
> { 
>   uint8_t temp ;
>   cgc_size_t tmp ;
>   int tmp___0 ;
240,243c322
< int main(int cgc_argc, char *cgc_argv[])
< {
<   uint8_t temp;
< 
---
>   {
244a324,328
>   while (1) {
>     tmp___0 = cgc_isWinner();
>     if (tmp___0) {
>       break;
>     } else {
246,249c330,332
<   while (!cgc_isWinner())
<   {
<     if (cgc_receive_all(0, &temp, 1) != 1)
<     {
---
>     }
>     tmp = cgc_receive_all(0, (char *)(& temp), (cgc_size_t )1);
>     if (tmp != 1UL) {
251a335,336
>     } else {
> 
253,254c338
<     if (temp == 0xFF)
<     {
---
>     if ((int )temp == 255) {
256a341,342
>     } else {
> 
261,266c347,349
< 
< 
<   ((int (*)())0)();
< 
< 
<   cgc_transmit_all(1, "You Win\n", 8);
---
>   cgc_transmit_all(1, (char *)"You Win\n", (cgc_size_t )8);
>   return (0);
> }
