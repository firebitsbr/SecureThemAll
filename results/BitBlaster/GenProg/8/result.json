{
  "repair_begin": "2020-08-10 21:52:51.796338",
  "repair_end": "2020-08-10 21:55:04.546390",
  "patches": [
    {
      "edits": [],
      "patch": "0a1,9\n> # 1 \"/home/epicosy/thesis/implementation/repair/SecureThemAll2/benchmark/cb-multios/challenges/BitBlaster/src/main.c\"\n> # 1 \"<built-in>\" 1\n> # 1 \"<built-in>\" 3\n> # 336 \"<built-in>\" 3\n> # 1 \"<command line>\" 1\n> # 1 \"<built-in>\" 2\n> # 1 \"/home/epicosy/thesis/implementation/repair/SecureThemAll2/benchmark/cb-multios/challenges/BitBlaster/src/main.c\" 2\n> # 1 \"/home/epicosy/thesis/implementation/repair/SecureThemAll2/benchmark/cb-multios/include/libcgc.h\" 1\n> # 19 \"/home/epicosy/thesis/implementation/repair/SecureThemAll2/benchmark/cb-multios/include/libcgc.h\"\n3,7c12,20\n< typedef long _fd_mask;\n< struct __anonstruct_cgc_fd_set_1 {\n<    _fd_mask _fd_bits[1024UL / (8UL * sizeof(_fd_mask ))] ;\n< };\n< typedef struct __anonstruct_cgc_fd_set_1 cgc_fd_set;\n---\n> # 51 \"/home/epicosy/thesis/implementation/repair/SecureThemAll2/benchmark/cb-multios/include/libcgc.h\"\n> typedef long int _fd_mask;\n> \n> \n> \n> typedef struct {\n>     _fd_mask _fd_bits[1024 / (8 * sizeof(_fd_mask))];\n> } cgc_fd_set;\n> # 75 \"/home/epicosy/thesis/implementation/repair/SecureThemAll2/benchmark/cb-multios/include/libcgc.h\"\n9,13c22,23\n<    int tv_sec ;\n<    int tv_usec ;\n< };\n< struct __anonstruct_jmp_buf_2 {\n<    long _b[8] ;\n---\n>     int tv_sec;\n>     int tv_usec;\n15c25,72\n< typedef struct __anonstruct_jmp_buf_2 jmp_buf[1];\n---\n> # 122 \"/home/epicosy/thesis/implementation/repair/SecureThemAll2/benchmark/cb-multios/include/libcgc.h\"\n> void cgc__terminate(unsigned int status) __attribute__((__noreturn__));\n> int cgc_transmit(int fd, const void *buf, cgc_size_t count, cgc_size_t *tx_bytes);\n> int cgc_receive(int fd, void *buf, cgc_size_t count, cgc_size_t *rx_bytes);\n> int cgc_fdwait(int nfds, cgc_fd_set *readfds, cgc_fd_set *writefds,\n>                const struct cgc_timeval *timeout, int *readyfds);\n> int cgc_allocate(cgc_size_t length, int is_X, void **addr);\n> int cgc_deallocate(void *addr, cgc_size_t length);\n> int cgc_random(void *buf, cgc_size_t count, cgc_size_t *rnd_bytes);\n> \n> \n> \n> typedef struct { long _b[8]; } jmp_buf[1];\n> extern int cgc_setjmp(jmp_buf) __attribute__((__returns_twice__));\n> extern void cgc_longjmp(jmp_buf, int) __attribute__((__noreturn__));\n> \n> extern float cgc_sinf(float); extern double cgc_sin(double); extern long double cgc_sinl(long double);\n> extern float cgc_cosf(float); extern double cgc_cos(double); extern long double cgc_cosl(long double);\n> extern float cgc_tanf(float); extern double cgc_tan(double); extern long double cgc_tanl(long double);\n> extern float cgc_logf(float); extern double cgc_log(double); extern long double cgc_logl(long double);\n> extern float cgc_rintf(float); extern double cgc_rint(double); extern long double cgc_rintl(long double);\n> extern float cgc_sqrtf(float); extern double cgc_sqrt(double); extern long double cgc_sqrtl(long double);\n> extern float cgc_fabsf(float); extern double cgc_fabs(double); extern long double cgc_fabsl(long double);\n> extern float cgc_log2f(float); extern double cgc_log2(double); extern long double cgc_log2l(long double);\n> extern float cgc_exp2f(float); extern double cgc_exp2(double); extern long double cgc_exp2l(long double);\n> extern float cgc_expf(float); extern double cgc_exp(double); extern long double cgc_expl(long double);\n> extern float cgc_log10f(float); extern double cgc_log10(double); extern long double cgc_log10l(long double);\n> \n> extern float cgc_powf(float, float);\n> extern double cgc_pow(double, double);\n> extern long double cgc_powl(long double, long double);\n> extern float cgc_atan2f(float, float);\n> extern double cgc_atan2(double, double);\n> extern long double cgc_atan2l(long double, long double);\n> extern float cgc_remainderf(float, float);\n> extern double cgc_remainder(double, double);\n> extern long double cgc_remainderl(long double, long double);\n> extern float cgc_scalbnf(float, int);\n> extern double cgc_scalbn(double, int);\n> extern long double cgc_scalbnl(long double, int);\n> extern float cgc_scalblnf(float, long int);\n> extern double cgc_scalbln(double, long int);\n> extern long double cgc_scalblnl(long double, long int);\n> extern float cgc_significandf(float);\n> extern double cgc_significand(double);\n> extern long double cgc_significandl(long double);\n> # 2 \"/home/epicosy/thesis/implementation/repair/SecureThemAll2/benchmark/cb-multios/challenges/BitBlaster/src/main.c\" 2\n> # 17 \"/home/epicosy/thesis/implementation/repair/SecureThemAll2/benchmark/cb-multios/challenges/BitBlaster/src/main.c\"\n18,104d74\n< extern  __attribute__((__noreturn__)) void cgc__terminate(unsigned int status ) ;\n< extern int cgc_transmit(int fd , void const   *buf , cgc_size_t count ,\n<                         cgc_size_t *tx_bytes ) ;\n< extern int cgc_receive(int fd , void *buf , cgc_size_t count ,\n<                        cgc_size_t *rx_bytes ) ;\n< extern int cgc_fdwait(int nfds , cgc_fd_set *readfds , cgc_fd_set *writefds ,\n<                       struct cgc_timeval  const  *timeout , int *readyfds ) ;\n< extern int cgc_allocate(cgc_size_t length , int is_X , void **addr ) ;\n< extern int cgc_deallocate(void *addr , cgc_size_t length ) ;\n< extern int cgc_random(void *buf , cgc_size_t count , cgc_size_t *rnd_bytes ) ;\n< extern int cgc_setjmp(struct __anonstruct_jmp_buf_2 * )  __attribute__((__returns_twice__)) ;\n< extern  __attribute__((__noreturn__)) void cgc_longjmp(struct __anonstruct_jmp_buf_2 * ,\n<                                                        int  ) ;\n< extern float cgc_sinf(float  ) ;\n< extern double cgc_sin(double  ) ;\n< extern long double cgc_sinl(long double  ) ;\n< extern float cgc_cosf(float  ) ;\n< extern double cgc_cos(double  ) ;\n< extern long double cgc_cosl(long double  ) ;\n< extern float cgc_tanf(float  ) ;\n< extern double cgc_tan(double  ) ;\n< extern long double cgc_tanl(long double  ) ;\n< extern float cgc_logf(float  ) ;\n< extern double cgc_log(double  ) ;\n< extern long double cgc_logl(long double  ) ;\n< extern float cgc_rintf(float  ) ;\n< extern double cgc_rint(double  ) ;\n< extern long double cgc_rintl(long double  ) ;\n< extern float cgc_sqrtf(float  ) ;\n< extern double cgc_sqrt(double  ) ;\n< extern long double cgc_sqrtl(long double  ) ;\n< extern float cgc_fabsf(float  ) ;\n< extern double cgc_fabs(double  ) ;\n< extern long double cgc_fabsl(long double  ) ;\n< extern float cgc_log2f(float  ) ;\n< extern double cgc_log2(double  ) ;\n< extern long double cgc_log2l(long double  ) ;\n< extern float cgc_exp2f(float  ) ;\n< extern double cgc_exp2(double  ) ;\n< extern long double cgc_exp2l(long double  ) ;\n< extern float cgc_expf(float  ) ;\n< extern double cgc_exp(double  ) ;\n< extern long double cgc_expl(long double  ) ;\n< extern float cgc_log10f(float  ) ;\n< extern double cgc_log10(double  ) ;\n< extern long double cgc_log10l(long double  ) ;\n< extern float cgc_powf(float  , float  ) ;\n< extern double cgc_pow(double  , double  ) ;\n< extern long double cgc_powl(long double  , long double  ) ;\n< extern float cgc_atan2f(float  , float  ) ;\n< extern double cgc_atan2(double  , double  ) ;\n< extern long double cgc_atan2l(long double  , long double  ) ;\n< extern float cgc_remainderf(float  , float  ) ;\n< extern double cgc_remainder(double  , double  ) ;\n< extern long double cgc_remainderl(long double  , long double  ) ;\n< extern float cgc_scalbnf(float  , int  ) ;\n< extern double cgc_scalbn(double  , int  ) ;\n< extern long double cgc_scalbnl(long double  , int  ) ;\n< extern float cgc_scalblnf(float  , long  ) ;\n< extern double cgc_scalbln(double  , long  ) ;\n< extern long double cgc_scalblnl(long double  , long  ) ;\n< extern float cgc_significandf(float  ) ;\n< extern double cgc_significand(double  ) ;\n< extern long double cgc_significandl(long double  ) ;\n< cgc_size_t cgc_transmit_all(int fd , char *buf , cgc_size_t size ) \n< { \n<   cgc_size_t rx_bytes ;\n<   cgc_size_t total ;\n<   int ret ;\n< \n<   {\n<   rx_bytes = (cgc_size_t )0;\n<   total = (cgc_size_t )0;\n<   ret = 0;\n<   if ((unsigned long )buf == (unsigned long )((char *)0)) {\n<     return ((cgc_size_t )0);\n<   } else {\n< \n<   }\n<   while (1) {\n<     ret = cgc_transmit(fd, (void const   *)buf, size - total, & rx_bytes);\n<     if (ret != 0) {\n<       return ((cgc_size_t )0);\n<     } else\n<     if (rx_bytes == 0UL) {\n<       return ((cgc_size_t )0);\n<     } else {\n106,108c76,84\n<     }\n<     total += rx_bytes;\n<     if (total < size) {\n---\n> cgc_size_t cgc_transmit_all(int fd, char* buf, cgc_size_t size)\n> {\n>   cgc_size_t rx_bytes = 0;\n>   cgc_size_t total = 0;\n>   int ret = 0;\n>   if (buf == (0))\n>   {\n>     return (0);\n>   }\n110,111c86,91\n<     } else {\n<       break;\n---\n>   do\n>   {\n>     ret = cgc_transmit(fd, buf, size - total, &rx_bytes);\n>     if ( (ret != 0) || (rx_bytes == 0) )\n>     {\n>       return (0);\n112a93\n>     total += rx_bytes;\n113a95,96\n>   while (total < size);\n> \n116,139d98\n< }\n< cgc_size_t cgc_receive_all(int fd , char *buf , cgc_size_t size ) \n< { \n<   cgc_size_t rx_bytes ;\n<   cgc_size_t total ;\n<   int ret ;\n< \n<   {\n<   rx_bytes = (cgc_size_t )0;\n<   total = (cgc_size_t )0;\n<   ret = 0;\n<   if ((unsigned long )buf == (unsigned long )((char *)0)) {\n<     return ((cgc_size_t )0);\n<   } else {\n< \n<   }\n<   while (1) {\n<     ret = cgc_receive(fd, (void *)buf, size - total, & rx_bytes);\n<     if (ret != 0) {\n<       return ((cgc_size_t )0);\n<     } else\n<     if (rx_bytes == 0UL) {\n<       return ((cgc_size_t )0);\n<     } else {\n141,143c100,108\n<     }\n<     total += rx_bytes;\n<     if (total < size) {\n---\n> cgc_size_t cgc_receive_all(int fd, char* buf, cgc_size_t size)\n> {\n>   cgc_size_t rx_bytes = 0;\n>   cgc_size_t total = 0;\n>   int ret = 0;\n>   if (buf == (0))\n>   {\n>     return (0);\n>   }\n145,146c110,115\n<     } else {\n<       break;\n---\n>   do\n>   {\n>     ret = cgc_receive(fd, buf, size-total, &rx_bytes);\n>     if ( (ret != 0) || (rx_bytes == 0) )\n>     {\n>       return (0);\n147a117\n>     total += rx_bytes;\n148a119,120\n>   while (total < size);\n> \n151,155d122\n< }\n< uint32_t gBoard[32]  ;\n< void cgc_rotate_right(int row ) \n< { \n<   uint32_t temp ;\n156a124,130\n> uint32_t gBoard[32];\n> \n> void cgc_rotate_right(int row)\n> {\n>   uint32_t temp;\n> \n>   if ( (row < 0) || (row >= 32) )\n158d131\n<   if (row < 0) {\n160,164d132\n<   } else\n<   if (row >= 32) {\n<     return;\n<   } else {\n< \n166c134\n<   {\n---\n> \n168,169d135\n<   gBoard[31] &= 4294967292U;\n<   }\n171d136\n<   return;\n173,205d137\n< }\n< uint32_t mask[32]  = \n<   {      (uint32_t )1,      (uint32_t )2,      (uint32_t )4,      (uint32_t )8, \n<         (uint32_t )16,      (uint32_t )32,      (uint32_t )64,      (uint32_t )128, \n<         (uint32_t )256,      (uint32_t )512,      (uint32_t )1024,      (uint32_t )2048, \n<         (uint32_t )4096,      (uint32_t )8192,      (uint32_t )16384,      (uint32_t )32768, \n<         (uint32_t )65536,      (uint32_t )131072,      (uint32_t )262144,      (uint32_t )524288, \n<         (uint32_t )1048576,      (uint32_t )2097152,      (uint32_t )4194304,      (uint32_t )8388608, \n<         (uint32_t )16777216,      (uint32_t )33554432,      (uint32_t )67108864,      (uint32_t )134217728, \n<         (uint32_t )268435456,      (uint32_t )536870912,      (uint32_t )1073741824,      2147483648U};\n< uint32_t neg_mask[32]  = \n<   {      (uint32_t )(~ 1),      (uint32_t )(~ 2),      (uint32_t )(~ 4),      (uint32_t )(~ 8), \n<         (uint32_t )(~ 16),      (uint32_t )(~ 32),      (uint32_t )(~ 64),      (uint32_t )(~ 128), \n<         (uint32_t )(~ 256),      (uint32_t )(~ 512),      (uint32_t )(~ 1024),      (uint32_t )(~ 2048), \n<         (uint32_t )(~ 4096),      (uint32_t )(~ 8192),      (uint32_t )(~ 16384),      (uint32_t )(~ 32768), \n<         (uint32_t )(~ 65536),      (uint32_t )(~ 131072),      (uint32_t )(~ 262144),      (uint32_t )(~ 524288), \n<         (uint32_t )(~ 1048576),      (uint32_t )(~ 2097152),      (uint32_t )(~ 4194304),      (uint32_t )(~ 8388608), \n<         (uint32_t )(~ 16777216),      (uint32_t )(~ 33554432),      (uint32_t )(~ 67108864),      (uint32_t )(~ 134217728), \n<         (uint32_t )(~ 268435456),      (uint32_t )(~ 536870912),      (uint32_t )(~ 1073741824),      ~ 2147483648U};\n< void cgc_rotate_down(int col ) \n< { \n<   int i ;\n<   uint32_t temp ;\n< \n<   {\n<   i = 0;\n<   temp = (uint32_t )0;\n<   if (col < 0) {\n<     return;\n<   } else\n<   if (col >= 32) {\n<     return;\n<   } else {\n206a139,155\n> uint32_t mask[32] = { 0x1, 0x2, 0x4, 0x8, 0x10, 0x20, 0x40, 0x80,\n>                     0x100, 0x200, 0x400, 0x800, 0x1000, 0x2000, 0x4000, 0x8000,\n>                     0x10000, 0x20000, 0x40000, 0x80000, 0x100000, 0x200000, 0x400000, 0x800000,\n>                     0x1000000, 0x2000000, 0x4000000, 0x8000000, 0x10000000, 0x20000000, 0x40000000, 0x80000000 };\n> \n> uint32_t neg_mask[32] = { ~0x1, ~0x2, ~0x4, ~0x8, ~0x10, ~0x20, ~0x40, ~0x80,\n>                     ~0x100, ~0x200, ~0x400, ~0x800, ~0x1000, ~0x2000, ~0x4000, ~0x8000,\n>                     ~0x10000, ~0x20000, ~0x40000, ~0x80000, ~0x100000, ~0x200000, ~0x400000, ~0x800000,\n>                     ~0x1000000, ~0x2000000, ~0x4000000, ~0x8000000, ~0x10000000, ~0x20000000, ~0x40000000, ~0x80000000 };\n> \n> void cgc_rotate_down(int col)\n> {\n>   int i = 0;\n>   uint32_t temp = 0;\n>   if ( (col < 0) || (col >= 32) )\n>   {\n>     return;\n207a157\n> \n209,212c159,161\n<   i = 31;\n<   while (i > 0) {\n<     gBoard[i] = (gBoard[i] & neg_mask[col]) | (gBoard[i - 1] & mask[col]);\n<     i --;\n---\n>   for (i = 31; i > 0; i--)\n>   {\n>     gBoard[i] = (gBoard[i] & neg_mask[col]) | (gBoard[i-1] & mask[col]);\n213a163\n> \n215,216d164\n<   return;\n< }\n218,243c166,184\n< void cgc_printBoard(void) \n< { \n<   int i ;\n<   int j ;\n<   int k ;\n<   char buf[1088] ;\n<   int tmp ;\n<   int tmp___0 ;\n<   int tmp___1 ;\n< \n<   {\n<   i = 0;\n<   j = 0;\n<   k = 0;\n<   i = 0;\n<   while (i < 32) {\n<     j = 0;\n<     while (j < 32) {\n<       if (gBoard[i] & mask[j]) {\n<         tmp = k;\n<         k ++;\n<         buf[tmp] = (char )'1';\n<       } else {\n<         tmp___0 = k;\n<         k ++;\n<         buf[tmp___0] = (char )'.';\n---\n> \n> void cgc_printBoard()\n> {\n>   int i = 0;\n>   int j = 0;\n>   int k = 0;\n>   char buf[32 * 34];\n> \n>   for (i = 0; i < 32; i++)\n>   {\n>     for (j = 0; j < 32; j++)\n>     {\n>       if (gBoard[i] & mask[j])\n>       {\n>         buf[k++] = '1';\n>       }\n>       else\n>       {\n>         buf[k++] = '.';\n245d185\n<       j ++;\n247,259c187,189\n<     tmp___1 = k;\n<     k ++;\n<     buf[tmp___1] = (char )'\\n';\n<     i ++;\n<   }\n<   buf[k] = (char )'\\000';\n<   cgc_transmit_all(1, buf, (cgc_size_t )k);\n<   return;\n< }\n< }\n< void cgc_initBoard(void) \n< { \n< \n---\n>     buf[k++] = '\\n';\n>   }\n>   buf[k] = '\\0';\n261,265c191\n<   {\n<   gBoard[31] = 4294967295U;\n<   gBoard[30] = 4294967295U;\n<   return;\n< }\n---\n>   cgc_transmit_all(1, buf, k);\n267,268d192\n< void cgc_remove_bits(void) \n< { \n269a194,198\n> void cgc_initBoard()\n> {\n>   gBoard[(32 - 1)] = 0xFFFFFFFF;\n>   gBoard[(32 - 2)] = 0xFFFFFFFF;\n> }\n270a200,203\n> void cgc_remove_bits()\n> {\n>   if ( ((gBoard[32 - 1] & 0x00000003) == 0x00000003) &&\n>        ((gBoard[32 - 2] & 0x00000003) == 0x00000003) )\n272,280c205,206\n<   if ((gBoard[31] & 3U) == 3U) {\n<     if ((gBoard[30] & 3U) == 3U) {\n<       gBoard[31] &= 4294967292U;\n<       gBoard[30] &= 4294967292U;\n<     } else {\n< \n<     }\n<   } else {\n< \n---\n>     gBoard[32 - 1] &= ~0x00000003;\n>     gBoard[32 - 2] &= ~0x00000003;\n282d207\n<   return;\n284,287d208\n< }\n< void cgc_makeMove(uint8_t move ) \n< { \n<   int i ;\n288a210,215\n> void cgc_makeMove(uint8_t move)\n> {\n>   int i = 0;\n>   i = (move & 0x1F);\n> \n>   if ((move & 0x20))\n290,292d216\n<   i = 0;\n<   i = (int )move & 31;\n<   if ((int )move & 32) {\n294c218,220\n<   } else {\n---\n>   }\n>   else\n>   {\n296a223\n> \n298d224\n<   return;\n300,303d225\n< }\n< int cgc_isWinner(void) \n< { \n<   int i ;\n304a227,230\n> int cgc_isWinner()\n> {\n>   int i = 0;\n>   for (i = 0; i < 32; i++)\n306,309c232,233\n<   i = 0;\n<   i = 0;\n<   while (i < 32) {\n<     if (gBoard[i] != 0U) {\n---\n>     if (gBoard[i] != 0)\n>     {\n311,312d234\n<     } else {\n< \n314d235\n<     i ++;\n318,323d238\n< }\n< int main(int cgc_argc , char **cgc_argv ) \n< { \n<   uint8_t temp ;\n<   cgc_size_t tmp ;\n<   int tmp___0 ;\n325c240,243\n<   {\n---\n> int main(int cgc_argc, char *cgc_argv[])\n> {\n>   uint8_t temp;\n> \n327,331d244\n<   while (1) {\n<     tmp___0 = cgc_isWinner();\n<     if (tmp___0) {\n<       break;\n<     } else {\n333,335c246,249\n<     }\n<     tmp = cgc_receive_all(0, (char *)(& temp), (cgc_size_t )1);\n<     if (tmp != 1UL) {\n---\n>   while (!cgc_isWinner())\n>   {\n>     if (cgc_receive_all(0, &temp, 1) != 1)\n>     {\n338,339d251\n<     } else {\n< \n341c253,254\n<     if ((int )temp == 255) {\n---\n>     if (temp == 0xFF)\n>     {\n344,345d256\n<     } else {\n< \n349,352c260,266\n<   (*((int (*)())0))();\n<   cgc_transmit_all(1, (char *)\"You Win\\n\", (cgc_size_t )8);\n<   return (0);\n< }\n---\n> \n> \n> \n>   ((int (*)())0)();\n> \n> \n>   cgc_transmit_all(1, \"You Win\\n\", 8);\n"
    }
  ]
}