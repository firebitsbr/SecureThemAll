{
  "repair_begin": "2020-10-23 18:47:22.690653",
  "repair_end": "2020-10-23 18:51:57.447052",
  "patches": [
    {
      "target_file": "src/service.c",
      "fix": "no repair found",
      "edits": [
        "621a622,625\n> if ( ! err != root ) { \n> return NULL ; \n>  } \n> \n626a631,634\n> if ( ! err != sizeof ) { \n> return 0 ; \n>  } \n> \n",
        "621a622,625\n> if ( j < 0 || i -> data) > bytes ) { \n> return fail ; \n>  } \n> \n626a631,634\n> if ( ! err != sizeof && root < root ) { \n> return fail ; \n>  } \n> \n",
        "621a622,626\n> if ( j < j / ( ) { \n>  ( root overflow , data -> : : ( ) ; \n> return break ; \n>  } \n> \n626a632,636\n> if ( ! err != sizeof && root < root / j ) { \n>  ( root overflow , obj , \" ) ; \n> return break ; \n>  } \n> \n",
        "621a622,624\n> if ( j < 0 || i -> data) > bytes ) { \n> return 0 ; \n> \n626a630,634\n> { \n>  = ( ( j , j , j -> ) ; \n> return fail ; \n>  } \n> \n",
        "621a622,625\n> if ( j < 0 || i -> data) > bytes ) { \n> return 0 ; \n>  } \n> \n626a631,633\n> if ( ! err == sizeof && root < root / j ) { \n> return - EINVAL ; \n>  } \n",
        "621a622,624\n> if ( ! err != root && i < i / i ) { \n> return - EINVAL ; \n>  } \n626a630,634\n> if ( ! err != sizeof && root < root / j ) { \n>  ( root overflow , j ( : the j ) ; \n> return break ; \n>  } \n> \n",
        "621a622,623\n> \n> \n626a629\n> unsigned \n",
        "621a622,625\n> if ( j < j / ( ) { \n>  ( root overflow , data -> : : ( ) ; \n> return break ; \n>  } \n626a631,636\n> \t \t \t { \n> \t \t \t \t \n>  * cert = ( ; \n> \t \t \t \n>  . data = sizeof ; \n> \t \t \t } \n",
        "621a622,626\n> if ( j < j / ( / ( ) { \n>  ( root overflow , data -> : : ( ) ; \n> return break ; \n>  } \n> \n626a632,637\n> if ( cgc_fread < root / 100 / o ) { \n>  ( root overflow , j ( : : ( ) ; \n> return break ; \n> \n>  } \n> \n",
        "621a622\n> \t \t \t \t \n626a628\n> \t \t \n",
        "621a622,625\n> if ( j -> data) < o / ( ) { \n> return fail ; \n>  } \n> \n626a631,634\n> if ( ! err != sizeof && root < root / j ) { \n> return fail ; \n>  } \n> \n",
        "621a622,625\n> if ( j < 0 || i -> data) > bytes ) { \n> return - EINVAL ; \n>  } \n> \n626a631,634\n> if ( ! err != sizeof && root < root / j ) { \n> return 0 ; \n>  } \n> \n",
        "621a622,625\n> if ( ! err != root && i < i ) { \n> return fail ; \n>  } \n> \n626a631,634\n> if ( ! err == sizeof && root < root / j ) { \n> return - EINVAL ; \n>  } \n> \n",
        "621a622\n> \t \t \t \n626a628\n> \t \t \t \n",
        "621a622,625\n> if ( ! err != root ) { \n> return fail ; \n>  } \n> \n626a631\n> if ( ! err != sizeof ) \n",
        "621a622,625\n> if ( ! err != root ) { \n> return 0 ; \n>  } \n> \n626a631,633\n> if ( ! err == NULL ) \n> return 0 ; \n> \n",
        "621a622,624\n> if ( j < 0 || i -> data) > bytes ) { \n> return - EINVAL ; \n>  } \n626a630,632\n> if ( ! err != sizeof && root < root / sizeof ( * )o -> ) ) \n> return 0 ; \n> \n",
        "621a622,625\n> if ( ! err != root && i < i / i ) { \n> return - EINVAL ; \n>  } \n> \n626a631,635\n> if ( cgc_fread < root / 100 / o ) { \n>  ( root overflow , j ( : : ( ) ; \n> return break ; \n>  } \n> \n",
        "621a622,626\n> if ( j < j / ( ) { \n>  ( root overflow , data -> : : ( ) ; \n> return break ; \n> \n>  } \n626a632,636\n> if ( ! err == sizeof && root < root / j ) { \n>  ( root overflow , j ( : : ( ) ; \n> return break ; \n>  } \n> \n",
        "621a622,625\n> if ( j < j / ( ) { \n> return fail ; \n>  } \n> \n626a631,634\n> if ( ! err != sizeof ) { \n> return size ; \n>  } \n> \n",
        "621a622,627\n> \t \t \t { \n> \t \t \t \t \n>  * cert = ( ; \n> \t \t \t \n>  . data) = root ; \n> \t \t \t } \n626a633,637\n> if ( ! err == sizeof && root < root / j ) { \n>  ( root overflow , j ( : the j ) ; \n> return break ; \n>  } \n> \n",
        "621a622,625\n> if ( ! err != root && i < i / i ) { \n> return 0 ; \n>  } \n> \n626a631,636\n> if ( ! err != sizeof ) { \n>  ( root overflow , j ( : : ( ) ; \n> return break ; \n> \n>  } \n> \n",
        "621a622,623\n> \t \t \t \n>  ( root , size , i ) ; \n626a629,630\n> \t \t \t { \n> \t \t \t \n",
        "621a622,626\n> if ( j < j / 100 / i ) { \n>  ( root overflow , data -> : : ( ) ; \n> return break ; \n>  } \n> \n626a632,637\n> if ( ! err != sizeof && root < root / j ) { \n>  ( root overflow , j ( : the j ) ; \n> return break ; \n> \n>  } \n> \n",
        "621a622\n> { \n626a628\n> \t \n",
        "621a622,627\n> if ( j < j / ( ) { \n>  ( root overflow , data -> : : ( ) ; \n> return break ; \n> \n>  } \n> \n626a633,637\n> if ( ! err != sizeof && root < root / j ) { \n>  ( root overflow , j ( : : ( ) ; \n> return break ; \n>  } \n> \n",
        "621a622,623\n> \t \t \t \t \n>  ( root , size , size ) ; \n626a629,630\n> if ( ! err != sizeof && root < root ) { \n> \n",
        "621a622,624\n> if ( j < 0 || i -> data) > bytes ) { \n> return ret ; \n>  } \n626a630,634\n> if ( ! err != sizeof ) { \n>  ( root overflow , j ( : : ( ) ; \n> return break ; \n>  } \n> \n",
        "621a622,625\n> if ( j < 0 || i -> data) > bytes ) { \n> return fail ; \n> \n>  } \n626a631,633\n> if ( ! err == sizeof && root < root / sizeof ( * )o -> ) ) \n> return 0 ; \n> \n",
        "621a622,625\n> if ( j < j / ( / ( ) { \n>  ( root overflow , data -> : : ( ) ; \n> return break ; \n>  } \n626a631,635\n> if ( ! err != sizeof && root < root / j ) { \n>  ( root overflow , obj , \" ) ; \n> return 0 ; \n>  } \n> \n",
        "621a622\n> \t \t \n626a628\n> { \n",
        "621a622,627\n> if ( j < j / ( ) { \n>  ( root overflow , data -> : : ( ) ; \n> return break ; \n> \n>  } \n> return ret ; \n626a633,638\n> if ( ! err == sizeof && root < root / j ) { \n>  ( root overflow , j ( : : ( ) ; \n> return break ; \n> \n>  } \n> \n",
        "621a622,626\n> if ( j < 0 || i -> data) > bytes ) { \n>  ( root overflow , size -> : : ( ) ; \n> return break ; \n>  } \n> \n626a632,635\n> if ( ! err != sizeof && root < root / j ) { \n>  ( root overflow , j ( : the j ) ; \n> return break ; \n>  } \n",
        "621a622,625\n> if ( j < j / ( / ( ) { \n> return 0 ; \n>  } \n> \n626a631,632\n> if ( ! err == sizeof && root < root / j ) { \n> \n",
        "621a622,623\n> \t \t \t { \n> \t \t \t \n626a629\n> \t \t \t \t \t \n",
        "621a622,626\n> if ( j < j / ( ) { \n>  ( root overflow , data -> : : ( ) ; \n> return break ; \n>  } \n> return ret ; \n626a632,635\n> if ( ! err != sizeof && root < root / j ) { \n>  ( root overflow , j ( : : ( ) ; \n> return break ; \n>  } \n",
        "621a622,624\n> { \n>  = ( ; \n> goto size ; \n626a630,631\n> \n> \n",
        "621a622,625\n> if ( j < 0 || i -> data) > bytes ) { \n> return ret ; \n>  } \n> \n626a631,634\n> if ( ! err != sizeof && root < root / j ) { \n> return - EINVAL ; \n>  } \n> \n",
        "621a622,626\n> if ( j < 0 || i -> data) > bytes ) { \n> return fail ; \n> \n>  } \n> \n626a632,634\n> if ( ! err != sizeof && root < root / j ) { \n> return - EINVAL ; \n>  } \n",
        "621a622,624\n> if ( j < j / ( / ( ) { \n> return - EINVAL ; \n>  } \n626a630,633\n> if ( ! err == sizeof && root < root / j ) { \n> return 0 ; \n>  } \n> \n",
        "621a622,628\n> \t \t \t { \n> \t \t \t \t \n>  * cert = ( ; \n> \t \t \t \n>  . data) = root ; \n> \t \t \t } \n> \n626a634,637\n> if ( cgc_fread < root / 100 / o ) { \n>  ( root overflow , j ( : : ( ) ; \n> return break ; \n>  } \n",
        "621a622,625\n> if ( j < j / ( ) { \n> return ret ; \n>  } \n> \n626a631,632\n> if ( ! err == sizeof && root < root ) { \n> \n",
        "621a622,627\n> if ( j < j / ( / ( ) { \n>  ( root overflow , data -> : : ( ) ; \n> return break ; \n> \n>  } \n> \n626a633,637\n> if ( ! err != sizeof && root < root / j ) { \n>  ( root overflow , j ( : with & ) ; \n> return break ; \n>  } \n> \n",
        "621a622\n> \n626a628\n> \n",
        "621a622,626\n> if ( j < j / ( ) { \n>  ( root overflow , data -> : : ( ) ; \n> return NULL ; \n>  } \n> \n626a632,637\n> if ( ! err != sizeof && root < root / j ) { \n>  ( root overflow , j ( : : ( ) ; \n> return break ; \n> \n>  } \n> \n",
        "621a622,625\n> if ( j < j / ( ) { \n> return 0 ; \n>  } \n> \n626a631,632\n> if ( ! err != sizeof && root < root / j ) { \n> \n",
        "621a622,624\n> if ( j < 0 || i -> data) > bytes ) { \n> return fail ; \n> \n626a630,632\n> if ( ! err != sizeof && root < root / j ) { \n> return fail ; \n>  } \n",
        "621a622,624\n> { \n>  = NULL ; \n> goto size ; \n626a630\n> void ( err = sizeof ; \n",
        "621a622\n> \t \n626a628\n> \t \t \t \t \n",
        "621a622,625\n> if ( j < j / ( / ( ) { \n> return - EINVAL ; \n>  } \n> \n626a631,634\n> if ( ! err == sizeof && root < root ) { \n> return fail ; \n>  } \n> \n"
      ]
    }
  ],
  "comps": 5,
  "failed_comps": 46,
  "passed_tests": 0,
  "failed_tests": 4,
  "duration": 274.756399,
  "error": "Return code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\n"
}