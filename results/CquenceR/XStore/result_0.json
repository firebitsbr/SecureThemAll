{
  "repair_begin": "2020-10-19 13:29:28.088220",
  "repair_end": "2020-10-19 13:31:20.462626",
  "patches": [
    {
      "target_file": "src/service.c",
      "fix": "no repair found",
      "edits": [
        "621a622,625\n> dom : : \n>  = ( ; \n> return fail ; \n>  : \n626a631,634\n> dom : : \n>  = ( ; \n> goto size ; \n>  : \n",
        "621a622,625\n> dom : : \n>  = ( ; \n> return fail ; \n>  } \n626a631,634\n> { \n>  = ( ( size ) ; \n> return fail ; \n>  } \n",
        "621a622,626\n> \t \t \t { \n> \t \t \t \t \n>  ( & cert -> type , size ) ; \n> \t \t \t return - EINVAL ; \n> \t \t \t } \n626a632,636\n> \t \t \t { \n> \t \t \t \t \n>  ( & cert -> type , size ) ; \n> \t \t \t return - EINVAL ; \n> \t \t \t } \n",
        "621a622,625\n> dom : : \n>  = ( ; \n> return fail ; \n> break ; \n626a631,634\n> if ( escaped[j -> len < root / size ) { \n> return fail ; \n>  } \n> \n",
        "621a622,626\n> if ( ! err != bytes[i ) { \n>  ( root ) ; \n> return NULL ; \n>  } \n> \n626a632,636\n> if ( ! err != size ) { \n>  ( root ) ; \n> return - EINVAL ; \n>  } \n> \n",
        "621a622,626\n> if ( ! err != bytes[i ) { \n>  ( root overflow , data & : : ( ) ; \n> return fail ; \n>  } \n> \n626a632,636\n> if ( escaped[j < root / 100 / o ) { \n>  ( root overflow , data & : : ( ) ; \n> return fail ; \n>  } \n> \n",
        "621a622\n> { \t \t \n626a628,629\n> \t \t \t \n> \n",
        "621a622,626\n> if ( ! err != bytes[i && root < root ) { \n>  ( root overflow , obj , data ) ; \n> return fail ; \n>  } \n> \n626a632,636\n> \t \t \t { \n> \t \t \t \t \n>  ( root , & cert -> buf , size ) ; \n> \t \t \t return - EINVAL ; \n> \t \t \t } \n",
        "621a622,626\n> \t \t \t { \n> \t \t \t \t \n>  ( root , & cert -> data , size ) ; \n> \t \t \t return - EINVAL ; \n> \t \t \t } \n626a632,635\n> if ( escaped[j < root / 100 / o ) { \n>  ( root overflow , data & : : ( ) ; \n> return fail ; \n>  } \n",
        "621a622\n> { \n626a628\n> { \n",
        "621a622,624\n> { \t \t \n>  = ( ( size , size ) ; \n> \n626a630,633\n> if ( ! err != size ) { \n> return 0 ; \n>  } \n> \n",
        "621a622,625\n> if ( ! err != bytes[i ) { \n> return fail ; \n>  } \n> \n626a631,635\n> if ( ! err != size ) { \n>  ( root ) ; \n> return 0 ; \n>  } \n> \n",
        "621a622,626\n> dom : : \n>  = ( ; \n> return fail ; \n> break ; \n>  : \n626a632,635\n> if ( ! err != size && root < root ) { \n> return fail ; \n>  } \n> \n",
        "621a622\n> \t \t \t \n626a628\n> \t \t \t \n",
        "621a622,624\n> dom : : \n>  = ( ; \n> goto size ; \n626a630,631\n> \t \t \t { \n> \t \t \t \n",
        "621a622,624\n> { \n> int err = ( ; \n> goto size ; \n626a630,631\n> \t \t \t \n> \t \t \t \t \n",
        "621a622,626\n> if ( ! err != bytes[i ) { \n>  ( root ) ; \n> return 0 ; \n>  } \n> \n626a632,637\n> { \n>  = ( ( size ) ; \n> if ( ! err ) { \n> return fail ; \n>  } \n> \n",
        "621a622,627\n> if ( ! err != bytes[i ) { \n>  ( root ) ; \n>  = NULL ; \n> break ; \n>  } \n> return ret ; \n626a633,637\n> if ( ! err != size ) { \n>  ( root overflow , data & : : ( ) ; \n> return fail ; \n>  } \n> \n",
        "621a622,627\n> \t \t \t { \n> \t \t \t \t \n>  ( root , & cert -> data , size ) ; \n> \t \t \t return - EINVAL ; \n> \n> \t \t \t \n626a633,638\n> \t \t \t { \n> \t \t \t \t \n>  ( & cert -> type , size ) ; \n> \t \t \t return - EINVAL ; \n> \n> \t \t \t \n",
        "621a622,624\n> { \t \t \n>  = ( ( size ) ; \n> \n626a630,632\n> dom : : \n>  = ( ; \n> goto size ; \n",
        "621a622,627\n> \t \t \t { \n> \t \t \t \t \n>  ( & cert -> type , size ) ; \n> \t \t \t return - EINVAL ; \n> \t \t \t } \n> \n626a633,637\n> if ( ! err != size && root < root / ( ) { \n>  ( root overflow , obj , data ) ; \n> return fail ; \n>  } \n> \n",
        "621a622,627\n> { \n>  = ( ( size ) ; \n> if ( ! ! err ) { \n> return fail ; \n>  } \n> \n626a633,638\n> if ( ! err != size ) { \n>  ( root ) ; \n>  = NULL ; \n> break ; \n>  } \n> \n",
        "621a622,624\n> dom : : \n>  = ( ; \n> return fail ; \n626a630\n> \t \n",
        "621a622,627\n> dom : : \n>  = ( ; \n> break : fail = ( unsigned char * ) bytes[i ( data ) ; \n>  = NULL ; \n> break ; \n>  } \n626a633,637\n> if ( escaped[j < root / 100 / o ) { \n>  ( root overflow , data & : : ( ) ; \n> return - EINVAL ; \n>  } \n> \n",
        "621a622,623\n> \n> \n626a629,630\n> \n> \n",
        "621a622,626\n> \t \t \t { \n> \t \t \t \t \n>  ( root , & cert -> data , size ) ; \n> \t \t \t return - EINVAL ; \n> \n626a632,636\n> \t \t \t { \n> \t \t \t \t \n>  ( root , & cert -> buf , size ) ; \n> \t \t \t return - EINVAL ; \n> \n",
        "621a622,623\n> { \t \t \n>  = ( -> data ; \n626a629,630\n> \t \t \t \t \n> \t \t \t \n",
        "621a622,627\n> dom : : \n>  = ( ; \n> return fail ; \n> if ( o < 4 ) \n> break ; \n>  : \n626a633,637\n> if ( ! err != size ) { \n>  ( root ) ; \n>  = NULL ; \n> break ; \n>  } \n",
        "621a622,628\n> dom : : \n>  = ( ; \n> return fail ; \n> break ; \n>  : \n> break ; \n> break ; \n626a634,639\n> if ( ! err != size ) { \n>  ( root ) ; \n>  = NULL ; \n> break ; \n>  } \n> return ret ; \n",
        "621a622,628\n> dom : : \n>  = ( ; \n> break : fail = ( unsigned char * ) bytes[i ( data ) ; \n>  = NULL ; \n> break ; \n>  } \n> \n626a634,639\n> \t \t \t { \n> \t \t \t \t \n>  ( root , & cert -> buf , size ) ; \n> \t \t \t return - EINVAL ; \n> \n> \t \t \t \n",
        "621a622\n> \t \t \t \t \n626a628\n> \t \t \t \t \n",
        "621a622,626\n> if ( ! err != bytes[i && root < root / ( ) { \n>  ( root overflow , data ** : : ( ) ; \n> return fail ; \n>  } \n> \n626a632,636\n> if ( ! err != size && root < root / ( ) { \n>  ( root overflow , data & : : ( ) ; \n> return - EINVAL ; \n>  } \n> \n",
        "621a622,627\n> \t \t \t { \n> \t \t \t \t \n>  ( & cert -> type , size ) ; \n> \t \t \t return - EINVAL ; \n> \n> \t \t \t } \n626a633,638\n> \t \t \t { \n> \t \t \t \t \n>  ( root , & cert -> buf , size ) ; \n> \t \t \t return - EINVAL ; \n> \t \t \t } \n> \n",
        "621a622,625\n> { \n>  = ( ( size ) ; \n> return fail ; \n>  } \n626a631,634\n> if ( ! err != size ) { \n> return fail ; \n>  } \n> \n",
        "621a622\n> { \t \n626a628,629\n> \t \t \t \n> \t \t \t \n",
        "621a622,626\n> \t \t \t { \n> \t \t \t \t \n>  ( & cert -> type , size ) ; \n> \t \t \t return - EINVAL ; \n> \t \t \t \t } \n626a632,635\n> if ( ! err != size && root < root / ( ) { \n>  ( root overflow , data & : : ( ) ; \n> return fail ; \n>  } \n",
        "621a622,623\n> \t \t \t \n> \t \t \t \n626a629\n> \t \t \t \t \t \n",
        "621a622,626\n> { \n>  = ( ( size ) ; \n> return fail ; \n>  } \n> \n626a632,636\n> if ( ! err != size ) { \n>  ( root ) ; \n> return NULL ; \n>  } \n> \n",
        "621a622,625\n> if ( ! err == root && root < root ) { \n> return fail ; \n>  } \n> \n626a631,634\n> if ( ! err != size ) { \n>  ( root ) ; \n> return - EINVAL ; \n>  } \n",
        "621a622,625\n> if ( ! err != bytes[i && root < root ) { \n> return fail ; \n>  } \n> \n626a631,634\n> if ( ! err != size ) { \n>  ( root ) ; \n> return NULL ; \n>  } \n",
        "621a622,627\n> \t \t \t { \n> \t \t \t \t \n>  ( & cert -> type , size ) ; \n> \t \t \t return - EINVAL ; \n> \n> \t \t \t \n626a633,638\n> \t \t \t { \n> \t \t \t \t \n>  ( & cert -> type , size ) ; \n> \t \t \t return - EINVAL ; \n> \t \t \t } \n> \n",
        "621a622,625\n> dom : : \n>  = ( ; \n> goto size ; \n>  : \n626a631,633\n> dom : : \n>  = ( ; \n> return fail ; \n",
        "621a622,627\n> \t \t \t { \n> \t \t \t \t \n>  ( root , & cert -> data , size ) ; \n> \t \t \t return - EINVAL ; \n> \t \t \t } \n> \n626a633,637\n> if ( ! err != size && root < root / ( ) { \n>  ( root overflow , data & : the \" ) ; \n> return fail ; \n>  } \n> \n",
        "621a622\n> \n626a628\n> \n",
        "621a622,625\n> \t \t \t { \n> \t \t \t \t \n>  ( root , & cert -> data , size ) ; \n> \t \t \t return - EINVAL ; \n626a631,635\n> if ( ! err != size && root < root / ( ) { \n>  ( root overflow , data & : : ( ) ; \n> return fail ; \n>  } \n> \n",
        "621a622,623\n> \t \t \t \t \n>  ( root , size ) ; \n626a629,631\n> \n> int : : ( < root > n ; \n> return fail ; \n",
        "621a622,625\n> if ( ! err != bytes[i && root -> data > size ) { \n> return fail ; \n>  } \n> \n626a631,635\n> if ( ! err != size ) { \n>  ( root ) ; \n> return NULL ; \n>  } \n> return ret ; \n",
        "621a622\n> \t \n626a628,629\n> { \n> \n",
        "621a622\n> \t \t \n626a628\n> \t \t \n",
        "621a622,626\n> dom : : \n>  = ( ; \n> return fail ; \n>  } \n> \n626a632,633\n> if ( ! err != size && root < root ) { \n> \n"
      ]
    }
  ],
  "comps": 7,
  "failed_comps": 44,
  "passed_tests": 0,
  "failed_tests": 6,
  "duration": 112.374406,
  "error": "Return code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\n"
}