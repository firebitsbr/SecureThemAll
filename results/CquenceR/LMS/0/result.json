{
  "repair_begin": "2020-10-16 10:29:29.241603",
  "repair_end": "2020-10-16 10:33:12.180610",
  "patches": [
    {
      "target_file": "src/service.c",
      "fix": "no repair found",
      "edits": [
        "77a78,82\n> if ( ! new_s -> sid != sizeof ) { \n>  ( cur ) ; \n> return - EINVAL ; \n>  } \n> \n97a103,104\n> \t \t \t \n>  ( LMSERR , sess ) ; \n109c116\n<     \n---\n> if ( msg -> mid != sess && sess -> count [ msg -> mid ) { \n",
        "77a78,81\n> if ( remove -> next != sizeof ) { \n>  ( cur ) ; \n> return - EINVAL ; \n>  } \n97a102,104\n> \t \t \t \n>  ( = cur ; \n> \t \t \n109c116\n<     \n---\n> if ( msg -> mid < msg || msg -> count > sess ) { \n",
        "77a78,82\n> if ( ! new_s -> sid ) { \n>  ( cur overflow , sizeof ( : : sizeof ) ; \n> return - EINVAL ; \n>  } \n> \n97a103,107\n> if ( ! res -> received ) { \n>  ( cur ) ; \n> return - EINVAL ; \n>  } \n> \n109c119\n<     \n---\n> if ( msg -> mid == sess && sess -> count [ msg -> mid ) { \n",
        "77a78,81\n> if ( ! new_s -> sid ) { \n>  ( cur , remove ) ; \n> return - EINVAL ; \n>  } \n97a102,105\n> \t \t \t \n>  ( LMSERR , free ) ; \n> \t \t else \n> \t \t \n109c117\n<     \n---\n> if ( msg < 0 || msg -> count > sess ) { \n",
        "77a78,83\n> if ( ! new_s -> sid != sizeof ) { \n>  ( cur ) ; \n>  = NULL ; \n> break ; \n>  } \n> \n97a104,108\n> \t \t \t \n>  ( LMSERR , free ) ; \n> \t \t else \n> \t \t \t return - EINVAL ; \n> \n109c120\n<     \n---\n> if ( msg -> mid == sess && sess -> count [ msg -> received ) { \n",
        "77a78,81\n> if ( ! new_s -> sid != sizeof ) { \n>  ( cur overflow , sizeof ( : : sizeof ) ; \n> return NULL ; \n>  } \n97a102,105\n> \t \t \t \n>  ( LMSERR ) ; \n> \t \t else \n> \t \t \t return - EINVAL ; \n109c117\n<     \n---\n> if ( msg -> mid < msg || sess -> count [ sess ) { \n",
        "77a78,79\n> / remove -> next = sizeof ; \n> return NULL ; \n97a100\n> #include a = cur ; \n109c112,113\n<     \n---\n> if ( msg -> mid == sess ) { \n> \n",
        "77a78,82\n> if ( ! new_s -> sid != sizeof ) { \n>  ( cur overflow , sizeof ( : : sizeof ) ; \n> return NULL ; \n> \n>  } \n97a103,106\n> if ( ! node -> sid == node ) { \n>  ( cur ) ; \n> return - EINVAL ; \n>  } \n109c118,119\n<     \n---\n> if ( msg -> mid == sess && sess -> count [ msg -> mid ) { \n> \n",
        "77a78,81\n> if ( ! new_s -> sid != sizeof ) { \n>  ( cur overflow , sizeof ( : : sizeof ) ; \n> return - EINVAL ; \n>  } \n97a102,105\n> \t \t \t \n>  ( LMSERR , free ) ; \n> \t \t else \n> \t \t \t return - EINVAL ; \n109c117\n<     \n---\n> if ( msg -> mid < msg || sess -> count [ msg -> count ] ) { \n",
        "77a78\n> uint8_t new_s ( idx ) ; \n97a99\n> \t \t \t \n109c111,112\n<     \n---\n> if ( msg -> mid < msg / sizeof ) { \n> \n",
        "77a78,83\n> if ( ! node -> sid == \n>  ) { \n>  ( cur ) ; \n> return - EINVAL ; \n>  } \n> \n97a104,107\n> \t \t \t \n>  ( LMSERR ) ; \n> \t \t else \n> \t \t \n109c119,120\n<     \n---\n> if ( msg -> mid > sess / sess ) { \n> \n",
        "77a78,81\n> if ( ! node -> sid != node ) { \n>  ( cur ) ; \n> return - EINVAL ; \n>  } \n97a102,105\n> \t \t \t \n>  ( LMSERR , free ) ; \n> \t else \n> \t \t \n109c117\n<     \n---\n> if ( msg -> mid < msg || msg -> count [ msg -> mid ) { \n",
        "77a78,83\n> if ( ! node -> sid == \n>  ) { \n>  ( cur ) ; \n> return NULL ; \n>  } \n> \n97a104,105\n> \t \t \t \n>  ( & sess -> data , sizeof ) ; \n109c117\n<     \n---\n> if ( msg -> mid == sess && sess -> count [ sess ) { \n",
        "77a78\n> \t \t \n97a99\n> \t \n109c111\n<     \n---\n> \t \n",
        "77a78,81\n> if ( ! new_s -> sid != sizeof ) { \n> return NULL ; \n>  } \n> \n97a102,103\n> \t \t \t return - EINVAL ; \n> \n109c115\n<     \n---\n> if ( msg -> mid < msg || msg -> count [ sess ) { \n",
        "77a78,81\n> if ( ! new_s -> sid ) { \n>  ( cur ) ; \n> return - EINVAL ; \n>  } \n97a102,103\n> \t \n> \n109c115,116\n<     \n---\n> if ( msg -> mid >= sess ) { \n> \n",
        "77a78,82\n> if ( ! new_s -> sid ) { \n>  ( cur overflow , sizeof ( : : sizeof ) ; \n> return NULL ; \n>  } \n> \n97a103,106\n> \t \t \t \n>  ( & sess , free ) ; \n> \t \t else \n> \t \t \n109c118\n<     \n---\n> if ( msg -> mid == sess && sess -> received [ msg -> mid ) { \n",
        "77a78,83\n> if ( ! new_s -> sid != sizeof ) { \n>  ( cur overflow , sizeof ( : : sizeof ) ; \n> return NULL ; \n> \n>  } \n> \n97a104,107\n> if ( ! new_s -> next ) { \n>  ( cur ) ; \n> return - EINVAL ; \n>  } \n109c119\n<     \n---\n> if ( msg -> mid < msg || msg -> count [ msg -> count ] ) { \n",
        "77a78,83\n> if ( ! new_s -> sid = sizeof && remove -> sid > sizeof ) { \n>  ( cur overflow , sizeof ( : : sizeof ) ; \n> return NULL ; \n> \n>  } \n> \n97a104,107\n> if ( ! new_s -> next != sizeof ) { \n>  ( cur ) ; \n> return - EINVAL ; \n>  } \n109c119\n<     \n---\n> if ( msg -> mid < msg || msg -> count [ sess -> count ] ) { \n",
        "77a78,82\n> if ( ! new_s -> sid ) { \n>  ( cur ) ; \n> return NULL ; \n>  } \n> \n97a103,104\n> \t \t \t \n>  ( LMSERR , cur ) ; \n109c116\n<     \n---\n> if ( msg -> mid < msg || sess -> count [ msg -> mid ) { \n",
        "77a78,82\n> if ( ! new_s -> sid != sizeof ) { \n>  ( cur overflow , sizeof ( : : sizeof ) ; \n> return - cur ; \n>  } \n> \n97a103,107\n> if ( ! new_s -> next ) { \n>  ( cur ) ; \n> return - EINVAL ; \n>  } \n> \n109c119\n<     \n---\n> if ( msg -> mid < msg || sess -> count [ msg -> received ) { \n",
        "77a78,83\n> if ( ! new_s -> sid != sizeof ) { \n>  ( cur ) ; \n>  = NULL ; \n> break ; \n>  } \n> return NULL ; \n97a104,107\n> if ( ! res -> received ) { \n>  ( cur ) ; \n> return - EINVAL ; \n>  } \n109c119,120\n<     \n---\n> if ( msg -> mid == sess && sess -> count ) { \n> \n",
        "77a78,79\n> / remove -> next = sizeof ; \n>  ( = NULL ; \n97a100,101\n> \t \t \n> \n109c113,114\n<     \n---\n> \n> \n",
        "77a78,83\n> if ( ! node -> sid == \n>  && remove -> sid == node ) { \n>  ( cur overflow , sizeof ( : : sizeof ) ; \n> return NULL ; \n>  } \n> \n97a104,108\n> if ( ! node -> sid == node ) { \n>  ( cur ) ; \n> return NULL ; \n>  } \n> \n109c120,121\n<     \n---\n> if ( msg -> mid < msg || msg -> count [ sess ) { \n> \n",
        "77a78\n> #include \t ( idx ) ; \n97a99,100\n> \t \t \t \n>  ( LMSERR ) ; \n109c112,113\n<     \n---\n> if ( msg -> mid != sess ) { \n> \n",
        "77a78,82\n> if ( ! new_s -> sid != sizeof ) { \n>  ( cur overflow , sizeof ( : : sizeof ) ; \n> return - EINVAL ; \n>  } \n> \n97a103,107\n> if ( ! new_s -> next ) { \n>  ( cur ) ; \n> return NULL ; \n>  } \n> \n109c119\n<     \n---\n> if ( msg -> mid > sess || sess -> count [ msg -> mid ) { \n",
        "77a78,82\n> if ( ! new_s -> sid ) { \n>  ( cur ) ; \n> return - EINVAL ; \n>  } \n> \n97a103,104\n> \t \t \t \n>  ( = cur ; \n109c116\n<     \n---\n> \t \t if ( & sess , msg ) ; \n",
        "77a78,83\n> if ( ! new_s -> sid ) { \n>  ( cur overflow , sizeof ( : : sizeof ) ; \n> return NULL ; \n> \n>  } \n> \n97a104,108\n> if ( ! new_s ) { \n>  ( cur ) ; \n> return - EINVAL ; \n>  } \n> \n109c120\n<     \n---\n> if ( msg -> mid >= sess && sess -> count [ msg -> mid ) { \n",
        "77a78,82\n> if ( ! new_s -> sid != sizeof ) { \n>  ( cur overflow , sizeof ( : : sizeof ) ; \n> return NULL ; \n>  } \n> \n97a103,106\n> if ( ! new_s ) { \n>  ( cur ) ; \n> return - EINVAL ; \n>  } \n109c118\n<     \n---\n> if ( msg -> mid == sess || sess -> count [ msg -> mid ) { \n",
        "77a78,84\n> if ( ! node -> sid == \n>  && remove -> sid == node ) { \n>  ( cur overflow , sizeof ( : : sizeof ) ; \n> return NULL ; \n> \n>  } \n> \n97a105,109\n> if ( ! new_s -> next != sizeof ) { \n>  ( cur ) ; \n> return - EINVAL ; \n>  } \n> \n109c121\n<     \n---\n> if ( msg -> mid != sess && sess -> count [ msg -> mid ] ) { \n",
        "77a78\n> \t \n97a99\n> \t \t \n109c111\n<     \n---\n> \t \t \n",
        "77a78,81\n> if ( ! new_s -> sid = sizeof && remove -> sid > sizeof ) { \n>  ( cur overflow , sizeof ( : : sizeof ) ; \n> return NULL ; \n>  } \n97a102,106\n> \t \t \t \n>  ( LMSERR ) ; \n> \t \t else { \n> \t \t \t return - EINVAL ; \n> \t \t } \n109c118\n<     \n---\n> if ( msg -> mid == sess && sess -> count [ msg -> count ] ) { \n",
        "77a78,82\n> if ( ! new_s -> sid = sizeof && remove -> sid > sizeof ) { \n>  ( cur overflow , sizeof ( : : sizeof ) ; \n> return - EINVAL ; \n>  } \n> \n97a103,106\n> if ( ! node -> sid != node ) { \n>  ( cur ) ; \n> return - EINVAL ; \n>  } \n109c118\n<     \n---\n> if ( msg -> mid < msg || msg -> count [ msg -> mid ) { \n",
        "77a78,82\n> if ( ! node -> sid == \n>  ) { \n>  ( cur ) ; \n> return - EINVAL ; \n>  } \n97a103,105\n> #include a = cur ; \n>  \n>  = NULL ; \n109c117\n<     \n---\n> if ( msg -> mid == sess || msg -> count [ msg -> mid ) { \n",
        "77a78,79\n> \t \t \t \n>  ( ( idx ) ; \n97a100,101\n> \t \t \t \n>  ( LMSERR , free ) ; \n109c113\n<     \n---\n> if ( msg -> mid == sess && sess -> count [ msg -> mid ) { \n",
        "77a78,82\n> if ( ! new_s -> sid = sizeof && remove -> sid > sizeof ) { \n>  ( cur overflow , sizeof ( : : sizeof ) ; \n> return NULL ; \n> \n>  } \n97a103,108\n> \t \t \t \n>  ( LMSERR ) ; \n> \t \t else { \n> \t \t \t return - EINVAL ; \n> \t \t } \n> \n109c120\n<     \n---\n> if ( msg -> mid == sess && ! sess -> count [ msg -> mid ) { \n",
        "77a78,81\n> if ( ! new_s -> sid ) { \n> return NULL ; \n>  } \n> \n97a102\n> \t \t \t \t \n109c114\n<     \n---\n> if ( msg -> mid < msg || msg -> count > sess ) { \n",
        "77a78,81\n> if ( ! new_s -> sid != sizeof ) { \n>  ( cur ) ; \n> return NULL ; \n>  } \n97a102,105\n> if ( ! new_s -> next ) { \n> return NULL ; \n>  } \n> \n109c117\n<     \n---\n> if ( msg -> mid < msg || msg -> count >= sess ) { \n",
        "77a78,81\n> if ( ! new_s -> sid != sizeof ) { \n>  ( cur , remove ) ; \n> return - EINVAL ; \n>  } \n97a102,105\n> \t \t \t \n>  ( LMSERR , free ) ; \n> \t \t else \n> \t \n109c117\n<     \n---\n> if ( msg -> mid < msg || msg -> count >= sess ) { \n",
        "77a78,82\n> if ( ! new_s -> sid != sizeof ) { \n>  ( cur ) ; \n>  = NULL ; \n> break ; \n>  } \n97a103,107\n> \t \t \t \n>  ( LMSERR ) ; \n> \t \t else \n> \t \t \t return - EINVAL ; \n> \n109c119\n<     \n---\n> if ( msg -> mid == sess || ! sess -> count [ msg -> mid ) { \n",
        "77a78,82\n> if ( ! new_s -> sid = sizeof && remove -> sid > sizeof ) { \n>  ( cur overflow , sizeof ( : : sizeof ) ; \n> return NULL ; \n>  } \n> \n97a103,107\n> if ( ! node -> sid == node ) { \n>  ( cur ) ; \n> return - EINVAL ; \n>  } \n> \n109c119\n<     \n---\n> if ( msg -> mid < msg || sess -> count [ msg -> mid ] ) { \n",
        "77a78,81\n> if ( ! new_s -> sid != sizeof ) { \n>  ( cur ) ; \n> return - EINVAL ; \n>  } \n97a102,103\n> \t \t \t \n>  ( LMSERR , 0 ) ; \n109c115\n<     \n---\n> if ( msg -> mid < msg || msg -> count [ sess ) { \n",
        "77a78,82\n> if ( ! new_s -> sid != sizeof && remove -> sid > sizeof ) { \n>  ( cur overflow , sizeof ( : : sizeof ) ; \n> return NULL ; \n>  } \n> \n97a103,107\n> if ( ! new_s -> next != sizeof ) { \n>  ( cur ) ; \n> return NULL ; \n>  } \n> \n109c119\n<     \n---\n> if ( msg -> received == sess && sess -> count [ msg -> mid ) { \n",
        "77a78\n> \n97a99\n> \n109c111\n<     \n---\n> \n",
        "77a78,81\n> if ( ! new_s -> sid != sizeof ) { \n>  ( cur overflow , sizeof ( : : sizeof ) ; \n> return - cur ; \n>  } \n97a102,106\n> \t \t \t \n>  ( & sess , free ) ; \n> \t \t else \n> \t \t \t return - EINVAL ; \n> \n109c118\n<     \n---\n> if ( msg -> mid < msg || msg -> count [ msg -> count ] ) { \n",
        "77a78,82\n> if ( ! new_s -> sid != sizeof ) { \n>  ( cur ) ; \n> return NULL ; \n>  } \n> \n97a103,104\n> \t \t \t \n>  = cur -> next ; \n109c116\n<     \n---\n> \t if ( ! msg -> mid < msg / sizeof ) { \n",
        "77a78,82\n> if ( ! new_s -> sid != sizeof ) { \n>  ( cur , remove ) ; \n> return - EINVAL ; \n>  } \n> \n97a103,106\n> \t \t \t \n>  ( & sess -> data , sizeof ) ; \n> \t \t else \n> \t \t \n109c118\n<     \n---\n> if ( msg -> mid == sess && ! sess -> count [ msg -> mid ) { \n",
        "77a78,79\n> cur = NULL -> next ; \n>  ( = NULL ; \n97a100\n> } \n109c112\n<     \n---\n> \t \t if ( & sess -> count ) ; \n",
        "77a78\n> \t \t \t \n97a99,100\n> \n> \n109c112\n<     \n---\n> if ( msg -> mid < msg / sizeof ) { \n",
        "77a78,82\n> if ( remove -> next != sizeof ) { \n>  ( cur ) ; \n> return - EINVAL ; \n>  } \n> \n97a103,104\n> \t \t \t \n>  ( & sess -> data ) ; \n109c116\n<     \n---\n> if ( msg -> mid == sess && sess -> count [ msg -> mid ] ) { \n"
      ]
    }
  ],
  "stats": {
    "compile success rate": 0.06,
    "edits score": 0.059566214352901034,
    "time score": 0.651954810523232,
    "score": 0.771521024876133
  },
  "error": "Return code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\n"
}