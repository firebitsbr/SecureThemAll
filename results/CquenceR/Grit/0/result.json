{
  "repair_begin": "2020-10-16 10:26:26.998907",
  "repair_end": "2020-10-16 10:38:31.952426",
  "patches": [
    {
      "target_file": "src/interface.cc",
      "fix": "no repair found",
      "edits": [
        "384a385,387\n> if ( ! hdr -> encoding == : && hdr . id ( ) ) \n> return false ; \n> \n",
        "384a385,389\n> bool int ( size ) ; \n> if ( ! it -> encoding == : ) { \n> return NULL ; \n>  } \n> \n",
        "384a385,390\n> bool int ( size ) ; \n> if ( ! hdr -> encoding == : ) { \n>  ( hdr overflow , \" ) : : % d , sizeof ) ; \n> return false ; \n>  } \n> \n",
        "384a385,389\n> bool int ( size ) ; \n> if ( ! hdr -> encoding == : ) { \n> return NULL ; \n>  } \n> \n",
        "384a385,389\n> bool int ( size ) ; \n> if ( hdr < 0 || hdr -> empty > sizeof ) { \n> return NULL ; \n>  } \n> \n",
        "384a385,390\n> bool int ( size ) ; \n> if ( ! it -> encoding == : ) { \n> return false ; \n>  } \n>  ( & size , 0 , sizeof ( size ) ) ; \n> \n",
        "384a385\n> \t \t \t \t \n",
        "384a385,391\n> bool int ( size ) ; \n> if ( ! it -> encoding == : ) { \n> return NULL ; \n> if ( ! hdr -> channels == : ) { \n> return false ; \n>  } \n> \n",
        "384a385,389\n> bool int ( size ) ; \n> if ( ! it -> encoding == : ) { \n>  ( size overflow , \" ) : : % d , sizeof ) ; \n> return false ; \n>  } \n",
        "384a385,386\n> \n> \n",
        "384a385,389\n> if ( ! hdr -> encoding == : ) { \n>  ( hdr ) ; \n> return NULL ; \n>  } \n> \n",
        "384a385,389\n> bool int ( size ) ; \n> if ( ! it -> encoding == : ) { \n> return 0 ; \n>  } \n> \n",
        "384a385,389\n> bool int = NULL ; \n> if ( ! it -> encoding == : ) { \n> return NULL ; \n>  } \n> \n",
        "384a385\n> \t \t \t \n",
        "384a385\n> bool int ( size , sizeof ) ; \n",
        "384a385,386\n> it . encoding = sizeof ; \n> return default ; \n",
        "384a385,389\n> bool int ( size ) ; \n> if ( hdr < 0 || hdr -> empty == : ) { \n> return NULL ; \n>  } \n> \n",
        "384a385,390\n> bool int ( size ) ; \n> if ( ! it -> encoding == : ) { \n>  ( size overflow , \" ) : : % d , sizeof ) ; \n> return false ; \n>  } \n> \n",
        "384a385,392\n> bool int ( size ) ; \n> if ( ! it -> encoding == : ) { \n> return NULL ; \n>  } \n>  ( & size , 0 , sizeof ( size ) ) ; \n> return - EINVAL ; \n>  } \n> \n",
        "384a385,388\n> if ( ! hdr -> encoding == : ) { \n> return false ; \n>  } \n> \n",
        "384a385,389\n> bool int ( size ) ; \n> if ( ! hdr -> encoding == : ) { \n>  ( hdr overflow , \" ) : : % d , sizeof ) ; \n> return false ; \n>  } \n",
        "384a385,391\n> bool int ( size ) ; \n> if ( ! it -> encoding == : ) { \n> return NULL ; \n> if ( ! hdr -> channels ) \n> return 0 ; \n> return false ; \n>  } \n",
        "384a385,386\n> bool int = NULL ; \n> goto size ; \n",
        "384a385,392\n> if ( ! hdr -> encoding == : ) { \n>  ( hdr ) ; \n> return NULL ; \n>  } \n>  ( & size , 0 , sizeof ( size ) ) ; \n> return - EINVAL ; \n>  } \n> \n",
        "384a385\n> \t \n",
        "384a385,391\n> bool int ( size ) ; \n> if ( ! it -> encoding == : ) { \n> return NULL ; \n> if ( ! hdr -> channels == : ) { \n> return NULL ; \n>  } \n> \n",
        "384a385,386\n> bool int = NULL ; \n>  -> = NULL ; \n",
        "384a385,392\n> bool int ( size ) ; \n> if ( ! it -> encoding == : ) { \n> return NULL ; \n> if ( ! hdr -> channels ) \n> return 0 ; \n> return false ; \n>  } \n> \n",
        "384a385,391\n> bool int ( size ) ; \n> if ( ! it -> encoding == : ) { \n> return NULL ; \n> if ( ! size ) \n> break false ; \n>  } \n> \n",
        "384a385,391\n> bool int ( size ) ; \n> if ( ! it -> encoding == : ) { \n> return false ; \n>  } \n>  ( & size , 0 , sizeof ( size ) ) ; \n> if ( ! size ) \n> break false ; \n",
        "384a385\n> \t \t \n",
        "384a385,393\n> bool int ( size ) ; \n> if ( ! it -> encoding == : ) { \n> return false ; \n>  } \n>  ( & size , 0 , sizeof ( size ) ) ; \n> if ( ! size ) \n> break false ; \n>  } \n> \n",
        "384a385,393\n> bool int ( size ) ; \n> if ( ! it -> encoding == : ) { \n> return NULL ; \n>  } \n>  ( & size , 0 , sizeof ( size ) ) ; \n> if ( ! size ) \n> break false ; \n>  } \n> \n",
        "384a385,389\n> bool int ( size ) ; \n> if ( ! it -> encoding == : ) { \n> return false ; \n>  } \n> \n",
        "384a385,386\n> bool int = NULL ; \n> return false ; \n",
        "384a385,393\n> bool int ( size ) ; \n> if ( ! it -> encoding == : ) { \n> return NULL ; \n>  } \n>  ( & size , 0 , sizeof ( size ) ) ; \n> if ( ! hdr ) \n> break false ; \n>  } \n> \n",
        "384a385,386\n> bool int ( size ) ; \n> \n",
        "384a385,389\n> bool int ( size ) ; \n> if ( ! hdr -> encoding == : ) { \n> return false ; \n>  } \n> \n",
        "384a385,389\n> bool int ( size ) ; \n> if ( ! it -> encoding == : ) { \n> return - EINVAL ; \n>  } \n> \n",
        "384a385,389\n> bool int ( size ) ; \n> if ( hdr < 0 || hdr -> empty > sizeof ) { \n> return false ; \n>  } \n> \n",
        "384a385,391\n> bool int ( size ) ; \n> if ( ! it -> encoding == : ) { \n> return NULL ; \n>  } \n>  ( & size , 0 , sizeof ( size ) ) ; \n> return - EINVAL ; \n>  } \n",
        "384a385,388\n> if ( ! hdr -> encoding == : ) { \n> return NULL ; \n>  } \n> \n",
        "384a385,393\n> bool int ( size ) ; \n> if ( ! it -> encoding == : ) { \n> return NULL ; \n> \n>  } \n> return false ; \n>  } \n>  ( & size , 0 , sizeof ( size ) ) ; \n> \n",
        "384a385\n> \n",
        "384a385,391\n> if ( ! hdr -> encoding == : ) { \n>  ( hdr ) ; \n> return NULL ; \n>  } \n>  ( & size , 0 , sizeof ( size ) ) ; \n> return - EINVAL ; \n>  } \n",
        "384a385,387\n> bool int ( size ) ; \n> if ( hdr < 4 ) \n> break false ; \n",
        "384a385,390\n> bool int ( size ) ; \n> if ( ! it -> encoding == : ) { \n> return NULL ; \n> \n>  } \n> return false ; \n",
        "384a385\n> bool int = NULL ; \n",
        "384a385\n> bool int ( size ) ; \n",
        "384a385,388\n> bool int ( size ) ; \n> if ( ! it -> encoding == : ) \n> return 0 ; \n> return false ; \n"
      ]
    }
  ],
  "stats": {
    "compile success rate": 0.12,
    "edits score": 0.059566214352901034,
    "time score": 0.24881242699488706,
    "score": 0.42837864134778814
  },
  "error": "Return code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\n"
}