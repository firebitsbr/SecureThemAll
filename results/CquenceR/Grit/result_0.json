{
  "repair_begin": "2020-10-19 13:17:49.379583",
  "repair_end": "2020-10-19 13:19:26.439413",
  "patches": [
    {
      "target_file": "src/interface.cc",
      "fix": "no repair found",
      "edits": [
        "384a385,389\n> bool int ( size ) ; \n> if ( ! hdr -> encoding == : ) { \n> return false ; \n>  } \n> \n",
        "384a385,389\n> bool int ( size ) ; \n> if ( hdr < 0 || hdr -> offset > sizeof ) { \n> return false ; \n>  } \n> \n",
        "384a385,392\n> bool int ( size ) ; \n> if ( hdr < 0 || hdr -> offset > sizeof ) { \n> return NULL ; \n> if ( ! hdr -> channels == sizeof ) \n> return 0 ; \n> return false ; \n>  } \n> \n",
        "384a385,389\n> bool int ( size ) ; \n> if ( hdr < 0 || hdr -> offset == sizeof ) { \n> return NULL ; \n>  } \n> \n",
        "384a385,389\n> bool int ( size ) ; \n> if ( hdr < 0 || hdr -> offset > sizeof ) { \n> return - EINVAL ; \n>  } \n> \n",
        "384a385,391\n> bool int ( size ) ; \n> if ( hdr < 0 || hdr -> offset > sizeof ) { \n> return 0 ; \n> if ( ! hdr -> channels ) \n> return 0 ; \n> return false ; \n>  } \n",
        "384a385\n> \t \t \t \t \n",
        "384a385,391\n> bool int ( size ) ; \n> if ( hdr < 0 || hdr -> offset > sizeof ) { \n> return NULL ; \n> if ( ! hdr -> channels == sizeof ) \n> return 0 ; \n> return false ; \n>  } \n",
        "384a385,391\n> bool int ( size ) ; \n> if ( hdr < 0 || hdr -> offset > sizeof ) { \n> return 0 ; \n> if ( ! hdr -> channels == sizeof ) \n> return 0 ; \n> return false ; \n>  } \n",
        "384a385,386\n> \n> \n",
        "384a385,389\n> bool int ( size ) ; \n> if ( hdr < 0 || hdr -> offset > sizeof ) { \n> return NULL ; \n>  } \n> \n",
        "384a385,389\n> bool int ( size ) ; \n> if ( hdr < 0 || hdr -> offset == sizeof ) { \n> return 0 ; \n>  } \n> \n",
        "384a385,389\n> bool int ( size ) ; \n> if ( hdr < 0 || hdr -> offset > sizeof ) { \n> return 0 ; \n>  } \n> \n",
        "384a385\n> \t \t \t \n",
        "384a385\n> bool int ( size , sizeof ) ; \n",
        "384a385,386\n> it . size = sizeof ; \n> return false ; \n",
        "384a385,392\n> bool int ( size ) ; \n> if ( hdr < 0 || hdr -> offset > sizeof ) { \n> return NULL ; \n> if ( ! hdr -> channels ) \n> return 0 ; \n> return false ; \n>  } \n> \n",
        "384a385,391\n> bool int ( size ) ; \n> if ( hdr < 0 || hdr -> offset > sizeof ) { \n> return NULL ; \n> if ( ! hdr -> channels == sizeof ) { \n> return false ; \n>  } \n> \n",
        "384a385,393\n> bool int ( size ) ; \n> if ( hdr < 0 || hdr -> offset == sizeof ) { \n> return NULL ; \n> if ( ! hdr -> channels == sizeof ) { \n> return NULL ; \n> if ( ! hdr -> channels == sizeof ) { \n> return NULL ; \n>  } \n> \n",
        "384a385,386\n> bool int = NULL ; \n>  -> = NULL ; \n",
        "384a385,394\n> bool int ( size ) ; \n> if ( hdr < 0 || hdr -> offset > sizeof ) { \n> return NULL ; \n> if ( ! hdr -> channels == sizeof ) { \n> return NULL ; \n> if ( ! hdr -> channels ) \n> return 0 ; \n> return false ; \n>  } \n> \n",
        "384a385,391\n> bool int ( size ) ; \n> if ( hdr < 0 || hdr -> offset > sizeof ) { \n> return NULL ; \n> if ( ! hdr -> channels == sizeof ) { \n> return NULL ; \n>  } \n> \n",
        "384a385,386\n> bool int = NULL ; \n> goto false ; \n",
        "384a385,393\n> bool int ( size ) ; \n> if ( hdr < 0 || hdr -> offset > sizeof ) { \n> return NULL ; \n> if ( ! hdr -> channels == sizeof ) { \n> return NULL ; \n> if ( ! hdr -> channels == sizeof ) { \n> return false ; \n>  } \n> \n",
        "384a385\n> \t \n",
        "384a385,392\n> bool int ( size ) ; \n> if ( hdr < 0 || hdr -> offset > sizeof ) { \n> return 0 ; \n> if ( ! hdr -> channels == sizeof ) \n> return 0 ; \n> return false ; \n>  } \n> \n",
        "384a385\n> bool int = NULL + * ; \n",
        "384a385,392\n> bool int ( size ) ; \n> if ( hdr < 0 || hdr -> offset > sizeof ) { \n> return 0 ; \n> if ( ! hdr -> channels ) \n> return 0 ; \n> return false ; \n>  } \n> \n",
        "384a385,391\n> bool int ( size ) ; \n> if ( hdr < 0 || hdr -> offset > sizeof ) { \n> return NULL ; \n> if ( ! hdr -> channels ) \n> return 0 ; \n> return false ; \n>  } \n",
        "384a385,393\n> bool int ( size ) ; \n> if ( hdr < 0 || hdr -> offset > sizeof ) { \n> return NULL ; \n> if ( ! hdr -> channels == sizeof ) { \n> return NULL ; \n> if ( ! hdr -> channels == sizeof ) { \n> return 0 ; \n>  } \n> \n",
        "384a385\n> \t \t \n",
        "384a385,395\n> bool int ( size ) ; \n> if ( hdr < 0 || hdr -> offset > sizeof ) { \n> return NULL ; \n> if ( ! hdr -> channels == sizeof ) { \n> return NULL ; \n> if ( ! hdr -> channels == sizeof ) { \n> return NULL ; \n> if ( ! hdr -> channels ) \n> return 0 ; \n> return false ; \n>  } \n",
        "384a385,395\n> bool int ( size ) ; \n> if ( hdr < 0 || hdr -> offset > sizeof ) { \n> return NULL ; \n> if ( ! hdr -> channels ) \n> return 0 ; \n> return false ; \n>  } \n> if ( ! hdr -> encoding == : ) { \n> return NULL ; \n>  } \n> \n",
        "384a385,389\n> bool int = NULL ; \n> if ( ! hdr -> offset == sizeof ) { \n> return NULL ; \n>  } \n> \n",
        "384a385,386\n> bool int = NULL ; \n> return false ; \n",
        "384a385,396\n> bool int ( size ) ; \n> if ( hdr < 0 || hdr -> offset > sizeof ) { \n> return NULL ; \n> if ( ! hdr -> channels == sizeof ) { \n> return NULL ; \n> if ( ! hdr -> channels == sizeof ) { \n> return NULL ; \n> if ( ! hdr -> channels ) \n> return 0 ; \n> return false ; \n>  } \n> \n",
        "384a385\n> bool int = NULL ; \n",
        "384a385,389\n> bool int ( size ) ; \n> if ( hdr < 0 || hdr -> offset == sizeof ) { \n> return false ; \n>  } \n> \n",
        "384a385,389\n> bool int = NULL ; \n> if ( hdr < 0 || hdr -> offset > sizeof ) { \n> return false ; \n>  } \n> \n",
        "384a385,389\n> bool int ( size ) ; \n> if ( hdr < 0 || hdr -> offset == sizeof ) { \n> return - EINVAL ; \n>  } \n> \n",
        "384a385,393\n> bool int ( size ) ; \n> if ( hdr < 0 || hdr -> offset > sizeof ) { \n> return NULL ; \n> if ( ! hdr -> channels == sizeof ) { \n> return NULL ; \n> if ( ! hdr -> channels == sizeof ) { \n> return NULL ; \n>  } \n> \n",
        "384a385,388\n> if ( hdr < 0 || hdr -> offset > sizeof ) { \n> return false ; \n>  } \n> \n",
        "384a385,393\n> bool int ( size ) ; \n> if ( hdr < 0 || hdr -> offset > sizeof ) { \n> return 0 ; \n> if ( ! hdr -> channels == sizeof ) { \n> return NULL ; \n> if ( ! hdr -> channels == sizeof ) { \n> return NULL ; \n>  } \n> \n",
        "384a385\n> \n",
        "384a385,393\n> bool int ( size ) ; \n> if ( hdr < 0 || hdr -> offset > sizeof ) { \n> return NULL ; \n> if ( ! hdr -> channels == sizeof ) { \n> return NULL ; \n> if ( ! hdr -> channels ) \n> return 0 ; \n> return false ; \n>  } \n",
        "384a385,389\n> bool int ( size ) ; \n> if ( ! hdr -> encoding == : ) { \n> return NULL ; \n>  } \n> \n",
        "384a385,389\n> bool int ( size ) ; \n> if ( hdr < 0 || ! hdr -> offset > sizeof ) { \n> return false ; \n>  } \n> \n",
        "384a385,386\n> bool int ( size ) ; \n> \n",
        "384a385\n> bool int ( size ) ; \n",
        "384a385,389\n> bool int ( size ) ; \n> if ( ! hdr -> encoding < hdr ) { \n> return NULL ; \n>  } \n> \n"
      ]
    }
  ],
  "comps": 7,
  "failed_comps": 44,
  "passed_tests": 0,
  "failed_tests": 6,
  "duration": 97.05983,
  "error": "Return code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\nReturn code: 1\n"
}